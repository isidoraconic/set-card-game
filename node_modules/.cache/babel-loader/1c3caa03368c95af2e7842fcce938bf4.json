{"ast":null,"code":"import MODES from '../actions/GameModeEnum';\nexport default function DeckReducer(state = {\n  faceUp: [],\n  faceDown: [],\n  selected: [],\n  numValidSets: 0,\n  gameMode: null\n}, action) {\n  // This is the start of the game.\n  if (action.type === \"START GAME\") {\n    let [faceDown, faceUp] = getNewCards(generateDeck(action.difficulty), [], 12);\n    return {\n      faceUp: faceUp,\n      faceDown: faceDown,\n      selected: [],\n      numValidSets: 0,\n      gameMode: action.difficulty\n    };\n  }\n\n  if (action.type === \"DRAW 3 CARDS\") {\n    let [faceDownTemp, faceUpTemp] = getNewCards(state.faceDown, state.faceUp, 3);\n    return {\n      faceUp: faceUpTemp,\n      faceDown: faceDownTemp,\n      selected: state.selected,\n      numValidSets: state.numValidSets\n    };\n  }\n\n  if (action.type === \"CLEAR\") {\n    return {\n      faceUp: [],\n      faceDown: defaultDeck,\n      selected: [],\n      numValidSets: 0\n    };\n  }\n\n  if (action.type === \"SELECT\") {\n    return {\n      selected: selected.concat(action.index)\n    }; // let newSelected = []\n    // if (state.selected.includes(action.index)) {\n    //     newSelected = [...state.selected]\n    //     let elementIndex = state.selected.indexOf(action.index)\n    //     newSelected.splice(elementIndex, 1)\n    //     return {\n    //         faceUp: state.faceUp,\n    //         faceDown: state.faceDown,\n    //         selected: newSelected,\n    //         numValidSets: state.numValidSets\n    //     }\n    // }\n    // if (state.selected.length == 2) {\n    //     state.selected.push(action.index);\n    //     let validSet = isSet(state.faceUp[action.index], state.faceUp[state.selected[0]], state.faceUp[state.selected[1]]);\n    //     if (validSet) {\n    //         alert(\"Congrats, you created a valid set.\")\n    //         state.faceUp = removeIndices(state.selected, state.faceUp);\n    //         [state.faceDown, state.faceUp] = getNewCards(state.faceDown, state.faceUp, 3);\n    //         state.numValidSets++;\n    //     } else {\n    //         alert(\"Not a valid set.\")\n    //     }\n    //     return {\n    //         faceUp: state.faceUp,\n    //         faceDown: state.faceDown,\n    //         selected: [],\n    //         numValidSets: state.numValidSets\n    //     }\n    // } else {\n    //     let newSelected = state.selected.concat(action.index)\n    //     return {\n    //         faceUp: state.faceUp,\n    //         faceDown: state.faceDown,\n    //         selected: newSelected,\n    //         numValidSets: state.numValidSets,\n    //     }\n    // }\n  } else {\n    return state;\n  }\n}\n_c = DeckReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeckReducer\");","map":{"version":3,"sources":["/Users/isidoraconic/Desktop/set-game/src/reducers/DeckReducer.js"],"names":["MODES","DeckReducer","state","faceUp","faceDown","selected","numValidSets","gameMode","action","type","getNewCards","generateDeck","difficulty","faceDownTemp","faceUpTemp","defaultDeck","concat","index"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,yBAAlB;AAEA,eAAe,SAASC,WAAT,CACXC,KAAK,GAAG;AACJC,EAAAA,MAAM,EAAE,EADJ;AAEJC,EAAAA,QAAQ,EAAE,EAFN;AAGJC,EAAAA,QAAQ,EAAE,EAHN;AAIJC,EAAAA,YAAY,EAAE,CAJV;AAKJC,EAAAA,QAAQ,EAAE;AALN,CADG,EAORC,MAPQ,EAOA;AACP;AACA,MAAIA,MAAM,CAACC,IAAP,KAAgB,YAApB,EAAkC;AAC9B,QAAI,CAACL,QAAD,EAAWD,MAAX,IAAoBO,WAAW,CAACC,YAAY,CAACH,MAAM,CAACI,UAAR,CAAb,EAAkC,EAAlC,EAAsC,EAAtC,CAAnC;AACA,WAAO;AACHT,MAAAA,MAAM,EAAEA,MADL;AAEHC,MAAAA,QAAQ,EAAEA,QAFP;AAGHC,MAAAA,QAAQ,EAAE,EAHP;AAIHC,MAAAA,YAAY,EAAE,CAJX;AAKHC,MAAAA,QAAQ,EAAEC,MAAM,CAACI;AALd,KAAP;AAOH;;AACD,MAAGJ,MAAM,CAACC,IAAP,KAAgB,cAAnB,EAAmC;AAC/B,QAAI,CAACI,YAAD,EAAeC,UAAf,IAA6BJ,WAAW,CAACR,KAAK,CAACE,QAAP,EAAiBF,KAAK,CAACC,MAAvB,EAA+B,CAA/B,CAA5C;AACA,WAAO;AACHA,MAAAA,MAAM,EAAEW,UADL;AAEHV,MAAAA,QAAQ,EAAES,YAFP;AAGHR,MAAAA,QAAQ,EAAEH,KAAK,CAACG,QAHb;AAIHC,MAAAA,YAAY,EAAEJ,KAAK,CAACI;AAJjB,KAAP;AAOH;;AACD,MAAIE,MAAM,CAACC,IAAP,KAAgB,OAApB,EAA6B;AACzB,WAAO;AACHN,MAAAA,MAAM,EAAE,EADL;AAEHC,MAAAA,QAAQ,EAAEW,WAFP;AAGHV,MAAAA,QAAQ,EAAE,EAHP;AAIHC,MAAAA,YAAY,EAAE;AAJX,KAAP;AAMH;;AACD,MAAIE,MAAM,CAACC,IAAP,KAAgB,QAApB,EAA8B;AAC1B,WAAO;AACHJ,MAAAA,QAAQ,EAAEA,QAAQ,CAACW,MAAT,CAAgBR,MAAM,CAACS,KAAvB;AADP,KAAP,CAD0B,CAI1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,GA1CD,MA2CK;AACD,WAAOf,KAAP;AACH;AACJ;KAnFmBD,W","sourcesContent":["import MODES from '../actions/GameModeEnum';\n\nexport default function DeckReducer (\n    state = {\n        faceUp: [],\n        faceDown: [],\n        selected: [],\n        numValidSets: 0,\n        gameMode: null,\n    }, action) {\n        // This is the start of the game.\n        if (action.type === \"START GAME\") {\n            let [faceDown, faceUp]= getNewCards(generateDeck(action.difficulty), [], 12)\n            return {\n                faceUp: faceUp,\n                faceDown: faceDown,\n                selected: [],\n                numValidSets: 0,\n                gameMode: action.difficulty\n            }\n        }\n        if(action.type === \"DRAW 3 CARDS\") {\n            let [faceDownTemp, faceUpTemp] = getNewCards(state.faceDown, state.faceUp, 3)\n            return {\n                faceUp: faceUpTemp,\n                faceDown: faceDownTemp,\n                selected: state.selected,\n                numValidSets: state.numValidSets,\n            }\n\n        } \n        if (action.type === \"CLEAR\") {\n            return {\n                faceUp: [],\n                faceDown: defaultDeck,\n                selected: [],\n                numValidSets: 0\n            }\n        } \n        if (action.type === \"SELECT\") {\n            return {\n                selected: selected.concat(action.index)\n            }\n            // let newSelected = []\n            // if (state.selected.includes(action.index)) {\n            //     newSelected = [...state.selected]\n            //     let elementIndex = state.selected.indexOf(action.index)\n            //     newSelected.splice(elementIndex, 1)\n            //     return {\n            //         faceUp: state.faceUp,\n            //         faceDown: state.faceDown,\n            //         selected: newSelected,\n            //         numValidSets: state.numValidSets\n            //     }\n            // }\n            // if (state.selected.length == 2) {\n            //     state.selected.push(action.index);\n            //     let validSet = isSet(state.faceUp[action.index], state.faceUp[state.selected[0]], state.faceUp[state.selected[1]]);\n            //     if (validSet) {\n            //         alert(\"Congrats, you created a valid set.\")\n            //         state.faceUp = removeIndices(state.selected, state.faceUp);\n            //         [state.faceDown, state.faceUp] = getNewCards(state.faceDown, state.faceUp, 3);\n            //         state.numValidSets++;\n            //     } else {\n            //         alert(\"Not a valid set.\")\n            //     }\n            //     return {\n            //         faceUp: state.faceUp,\n            //         faceDown: state.faceDown,\n            //         selected: [],\n            //         numValidSets: state.numValidSets\n            //     }\n            // } else {\n            //     let newSelected = state.selected.concat(action.index)\n            //     return {\n            //         faceUp: state.faceUp,\n            //         faceDown: state.faceDown,\n            //         selected: newSelected,\n            //         numValidSets: state.numValidSets,\n            //     }\n            // }\n        } \n        else {\n            return state;\n        }\n    } \n\n    "]},"metadata":{},"sourceType":"module"}