{"ast":null,"code":"import MODES from '../actions/GameModeEnum';\nconst cardColors = [\"#EB96AA\", \"#90CDC3\", \"#cfdd8e\"];\nconst cardShapes = [\"flower\", \"heart\", \"star\"];\nconst cardShades = [\"white\", \"solid\", \"opaque\"];\nconst cardShapeCount = [1, 2, 3]; //Helper function for the isSet function, which checks if 3 attributes are all the same or all different\n//We then do this for all 4 attributes in a medium and hard level, and only 3 out of the 4 attributes in easy\n\nfunction validAttributeCondition(firstAttr, secondAttr, thirdAttr) {\n  return firstAttr === secondAttr && secondAttr === thirdAttr && thirdAttr === firstAttr || firstAttr !== secondAttr && firstAttr !== thirdAttr && secondAttr !== thirdAttr;\n} //Function to check if three cards make a set\n\n\nfunction isSet(cardOne, cardTwo, cardThree) {\n  return validAttributeCondition(cardOne.shape, cardTwo.shape, cardThree.shape) && validAttributeCondition(cardOne.color, cardTwo.color, cardThree.color) && validAttributeCondition(cardOne.shade, cardTwo.shade, cardThree.shade) && validAttributeCondition(cardOne.shapeCount, cardTwo.shapeCount, cardThree.shapeCount);\n}\n\nfunction findSet(currentCards) {\n  console.log(\"i am here!\");\n\n  for (let i = 0; i < currentCards.length; i++) {\n    for (let j = i + 1; j < currentCards.length; j++) {\n      for (let k = j + 1; k < currentCards.length; k++) {\n        if (isSet(currentCards[i], currentCards[j], currentCards[k])) {\n          console.log(\"first card index: \" + i + \", second card index: \" + j + \", third card index\" + k);\n          let first_card = currentCards[i];\n          let second_card = currentCards[j];\n          let third_card = currentCards[k];\n          return true;\n        }\n      }\n    }\n  }\n\n  return false;\n} // This method is from https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array \n//Randomly shuffles an array--we shuffle the arrays that hold cards such that when we flip 3 new cards off the top, they are random\n\n\nfunction shuffleArray(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n}\n\nfunction removeIndices(indices, indexList) {\n  let returnList = [...indexList];\n\n  for (const index in indices) {\n    returnList.splice(index, 1);\n  }\n\n  return returnList;\n}\n\nfunction getNewCards(faceDown, faceUp, numCards) {\n  if (faceDown.length === 0) {\n    return [faceDown, faceUp];\n  }\n\n  let returnFaceDown = [...faceDown];\n  let returnFaceUp = [...faceUp];\n\n  for (let i = 0; i < numCards; i++) {\n    returnFaceUp = returnFaceUp.concat(returnFaceDown[i]);\n  }\n\n  returnFaceDown.splice(0, numCards);\n  return [returnFaceDown, returnFaceUp];\n} //Function that generates an 81 card deck with each of the 4 attributes \n\n\nfunction generateDeck(difficulty) {\n  let deck = [];\n\n  for (let i = 0; i < 3; i++) {\n    for (let j = 0; j < 3; j++) {\n      for (let h = 0; h < 3; h++) {\n        if (difficulty === MODES.EASY) {\n          let card = {\n            color: cardColors[i],\n            shape: cardShapes[j],\n            shade: cardShades[h],\n            shapeCount: 1\n          };\n          deck.push(card);\n        } else {\n          for (let k = 0; k < 3; k++) {\n            let card = {\n              color: cardColors[i],\n              shape: cardShapes[j],\n              shade: cardShades[h],\n              shapeCount: cardShapeCount[k]\n            };\n            deck.push(card);\n          }\n        }\n      }\n    }\n  }\n\n  shuffleArray(deck);\n  return deck;\n}\n\nexport default function DeckReducer(state = {\n  faceUp: [],\n  faceDown: [],\n  selected: [],\n  numValidSets: 0,\n  gameMode: null,\n  gameOver: false\n}, action) {\n  // This is the start of the game.\n  if (action.type === \"START GAME\") {\n    let [faceDown, faceUp] = getNewCards(generateDeck(action.difficulty), [], 12);\n\n    if (action.difficulty === MODES.MEDIUM) {\n      while (!findSet(faceUp)) {\n        [faceDown, faceUp] = getNewCards(faceDown, faceUp, 3);\n      }\n    }\n\n    return {\n      faceUp: faceUp,\n      faceDown: faceDown,\n      selected: [],\n      numValidSets: 0,\n      gameMode: action.difficulty,\n      gameOver: false\n    };\n  }\n\n  if (action.type === \"DRAW 3 CARDS\") {\n    console.log(\"hello!\");\n    console.log(\"whut\");\n    console.log(\"state.faceDown === 0 ? \" + (state.faceDown === 0));\n    console.log(\"findSet(state.faceUp) === false ? \" + (findSet(state.faceUp) === false));\n    console.log(\"hello again\");\n    console.log(\"size of faceDown = \" + state.faceDown.length);\n\n    if (state.faceDown.length === 0 && findSet(state.faceUp) === false) {\n      console.log(\"i am here 1\");\n      return {\n        faceUp: state.faceUp,\n        faceDown: state.faceDown,\n        selected: state.selected,\n        numValidSets: state.numValidSets,\n        gameMode: state.gameMode,\n        gameOver: true\n      };\n    }\n\n    let [faceDownTemp, faceUpTemp] = getNewCards(state.faceDown, state.faceUp, 3);\n    findSet(faceUpTemp);\n    return {\n      faceUp: faceUpTemp,\n      faceDown: faceDownTemp,\n      selected: state.selected,\n      numValidSets: state.numValidSets,\n      gameMode: state.gameMode,\n      gameOver: false\n    };\n  }\n\n  if (action.type === \"SELECT\") {\n    let newSelected = [];\n\n    if (state.selected.includes(action.index)) {\n      newSelected = [...state.selected];\n      let elementIndex = state.selected.indexOf(action.index);\n      newSelected.splice(elementIndex, 1);\n      return {\n        faceUp: state.faceUp,\n        faceDown: state.faceDown,\n        selected: newSelected,\n        numValidSets: state.numValidSets,\n        gameMode: state.gameMode,\n        gameOver: false\n      };\n    }\n\n    if (state.selected.length == 2) {\n      state.selected.push(action.index);\n      let validSet = isSet(state.faceUp[action.index], state.faceUp[state.selected[0]], state.faceUp[state.selected[1]]);\n      let faceUp = [...state.faceUp];\n      let faceDown = [...state.faceDown];\n\n      if (validSet) {\n        alert(\"Congrats, you created a valid set.\");\n        faceUp = removeIndices(state.selected, faceUp);\n        let result = getNewCards(faceDown, faceUp, 3);\n        faceDown = result[0];\n        faceUp = result[1];\n\n        if (state.gameMode === MODES.MEDIUM) {\n          while (!findSet(faceUp) && faceDown.length > 2) {\n            result = getNewCards(faceDown, faceUp, 3);\n            faceDown = result[0];\n            faceUp = result[1];\n          }\n        }\n\n        while (faceUp < 12 && faceDown >= 3) {\n          result = getNewCards(faceDown, faceUp, 3);\n          faceDown = result[0];\n          faceUp = result[1];\n        }\n\n        state.numValidSets++;\n      } else {\n        alert(\"Not a valid set.\");\n      } //Need to check if there are any more sets to be made if there are no cards left to flip\n\n\n      if (faceDown.length === 0 && findSet(faceUp) === false) {\n        console.log(\"i am here 2\");\n        return {\n          faceUp: faceUp,\n          faceDown: faceDown,\n          selected: [],\n          numValidSets: state.numValidSets,\n          gameMode: state.gameMode,\n          gameOver: true\n        };\n      }\n\n      return {\n        faceUp: faceUp,\n        faceDown: faceDown,\n        selected: [],\n        numValidSets: state.numValidSets,\n        gameMode: state.gameMode,\n        gameOver: false\n      };\n    } else if (state.faceDown.length === 0 && findSet(state.faceUp) === false) {\n      console.log(\"i am here 3\");\n      return {\n        faceUp: state.faceUp,\n        faceDown: state.faceDown,\n        selected: state.selected.concat(action.index),\n        numValidSets: state.numValidSets,\n        gameMode: state.gameMode,\n        gameOver: true\n      };\n    } else {\n      return {\n        faceUp: state.faceUp,\n        faceDown: state.faceDown,\n        selected: state.selected.concat(action.index),\n        numValidSets: state.numValidSets,\n        gameMode: state.gameMode,\n        gameOver: false\n      };\n    }\n  }\n\n  return state;\n}\n_c = DeckReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeckReducer\");","map":{"version":3,"sources":["/Users/isidoraconic/Desktop/set-game/src/reducers/DeckReducer.js"],"names":["MODES","cardColors","cardShapes","cardShades","cardShapeCount","validAttributeCondition","firstAttr","secondAttr","thirdAttr","isSet","cardOne","cardTwo","cardThree","shape","color","shade","shapeCount","findSet","currentCards","console","log","i","length","j","k","first_card","second_card","third_card","shuffleArray","array","Math","floor","random","removeIndices","indices","indexList","returnList","index","splice","getNewCards","faceDown","faceUp","numCards","returnFaceDown","returnFaceUp","concat","generateDeck","difficulty","deck","h","EASY","card","push","DeckReducer","state","selected","numValidSets","gameMode","gameOver","action","type","MEDIUM","faceDownTemp","faceUpTemp","newSelected","includes","elementIndex","indexOf","validSet","alert","result"],"mappings":"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","sourcesContent":["import MODES from '../actions/GameModeEnum';\n\nconst cardColors = [\"#EB96AA\", \"#90CDC3\", \"#cfdd8e\"];\nconst cardShapes = [\"flower\", \"heart\", \"star\"];\nconst cardShades = [\"white\", \"solid\", \"opaque\"];\nconst cardShapeCount = [1, 2, 3];\n\n//Helper function for the isSet function, which checks if 3 attributes are all the same or all different\n//We then do this for all 4 attributes in a medium and hard level, and only 3 out of the 4 attributes in easy\nfunction validAttributeCondition(firstAttr, secondAttr, thirdAttr) {\n    return (firstAttr === secondAttr && secondAttr === thirdAttr && thirdAttr === firstAttr) || (firstAttr !== secondAttr && firstAttr !== thirdAttr && secondAttr !== thirdAttr);\n}\n\n//Function to check if three cards make a set\nfunction isSet(cardOne, cardTwo, cardThree) {\n    return validAttributeCondition(cardOne.shape, cardTwo.shape, cardThree.shape) &&\n        validAttributeCondition(cardOne.color, cardTwo.color, cardThree.color) &&\n        validAttributeCondition(cardOne.shade, cardTwo.shade, cardThree.shade) &&\n        validAttributeCondition(cardOne.shapeCount, cardTwo.shapeCount, cardThree.shapeCount)\n}\n\nfunction findSet(currentCards) {\n    console.log(\"i am here!\")\n    for (let i = 0; i < currentCards.length; i++) {\n        for (let j = i + 1; j < currentCards.length; j++) {\n            for (let k = j + 1; k < currentCards.length; k++) {\n                if (isSet(currentCards[i], currentCards[j], currentCards[k])) {\n                    console.log(\"first card index: \" + i + \", second card index: \" + j + \", third card index\" + k)\n                    let first_card = currentCards[i]\n                    let second_card = currentCards[j]\n                    let third_card = currentCards[k]\n\n                    return true\n                }\n\n            }\n        }\n    }\n    return false\n}\n\n// This method is from https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array \n//Randomly shuffles an array--we shuffle the arrays that hold cards such that when we flip 3 new cards off the top, they are random\nfunction shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n}\n\nfunction removeIndices(indices, indexList) {\n    let returnList = [...indexList]\n    for (const index in indices) {\n        returnList.splice(index, 1)\n    }\n    return returnList\n}\n\nfunction getNewCards(faceDown, faceUp, numCards) {\n    if (faceDown.length === 0) {\n        return [faceDown, faceUp]\n    }\n    let returnFaceDown = [...faceDown]\n    let returnFaceUp = [...faceUp]\n    for (let i = 0; i < numCards; i++) {\n        returnFaceUp = returnFaceUp.concat(returnFaceDown[i])\n    }\n    returnFaceDown.splice(0, numCards)\n    return [returnFaceDown, returnFaceUp]\n}\n\n//Function that generates an 81 card deck with each of the 4 attributes \nfunction generateDeck(difficulty) {\n    let deck = [];\n\n    for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 3; j++) {\n            for (let h = 0; h < 3; h++) {\n                if (difficulty === MODES.EASY) {\n                    let card = {\n                        color: cardColors[i],\n                        shape: cardShapes[j],\n                        shade: cardShades[h],\n                        shapeCount: 1,\n                    }\n                    deck.push(card);\n                } else {\n                    for (let k = 0; k < 3; k++) {\n                        let card = {\n                            color: cardColors[i],\n                            shape: cardShapes[j],\n                            shade: cardShades[h],\n                            shapeCount: cardShapeCount[k],\n                        }\n                        deck.push(card);\n                    }\n                }\n            }\n        }\n    }\n    shuffleArray(deck)\n    return deck;\n}\n\nexport default function DeckReducer(\n    state = {\n        faceUp: [],\n        faceDown: [],\n        selected: [],\n        numValidSets: 0,\n        gameMode: null,\n        gameOver: false,\n    }, action) {\n    // This is the start of the game.\n    if (action.type === \"START GAME\") {\n        let [faceDown, faceUp] = getNewCards(generateDeck(action.difficulty), [], 12)\n        if (action.difficulty === MODES.MEDIUM) {\n            while (!findSet(faceUp)) {\n                [faceDown, faceUp] = getNewCards(faceDown, faceUp, 3)\n            }\n        }\n        return {\n            faceUp: faceUp,\n            faceDown: faceDown,\n            selected: [],\n            numValidSets: 0,\n            gameMode: action.difficulty,\n            gameOver: false,\n        }\n    }\n    if (action.type === \"DRAW 3 CARDS\") {\n        console.log(\"hello!\")\n        console.log(\"whut\")\n        console.log(\"state.faceDown === 0 ? \" + (state.faceDown === 0))\n        console.log(\"findSet(state.faceUp) === false ? \" + (findSet(state.faceUp) === false))\n        console.log(\"hello again\")\n        console.log(\"size of faceDown = \" + state.faceDown.length)\n        if ((state.faceDown.length === 0) && (findSet(state.faceUp) === false)) {\n            console.log(\"i am here 1\")\n            return {\n                faceUp: state.faceUp,\n                faceDown: state.faceDown,\n                selected: state.selected,\n                numValidSets: state.numValidSets,\n                gameMode: state.gameMode,\n                gameOver: true,\n            }\n        }\n\n        let [faceDownTemp, faceUpTemp] = getNewCards(state.faceDown, state.faceUp, 3)\n        findSet(faceUpTemp)\n        return {\n            faceUp: faceUpTemp,\n            faceDown: faceDownTemp,\n            selected: state.selected,\n            numValidSets: state.numValidSets,\n            gameMode: state.gameMode,\n            gameOver: false,\n        }\n\n    }\n    if (action.type === \"SELECT\") {\n        let newSelected = []\n        if (state.selected.includes(action.index)) {\n            newSelected = [...state.selected]\n            let elementIndex = state.selected.indexOf(action.index)\n            newSelected.splice(elementIndex, 1)\n            return {\n                faceUp: state.faceUp,\n                faceDown: state.faceDown,\n                selected: newSelected,\n                numValidSets: state.numValidSets,\n                gameMode: state.gameMode,\n                gameOver: false,\n            }\n        }\n        if (state.selected.length == 2) {\n            state.selected.push(action.index);\n            let validSet = isSet(state.faceUp[action.index], state.faceUp[state.selected[0]], state.faceUp[state.selected[1]]);\n            let faceUp = [...state.faceUp]\n            let faceDown = [...state.faceDown]\n            if (validSet) {\n                alert(\"Congrats, you created a valid set.\")\n                faceUp = removeIndices(state.selected, faceUp);\n                let result = getNewCards(faceDown, faceUp, 3);\n                faceDown = result[0]\n                faceUp = result[1]\n                if (state.gameMode === MODES.MEDIUM) {\n                    while (!findSet(faceUp) && faceDown.length > 2) {\n                        result = getNewCards(faceDown, faceUp, 3)\n                        faceDown = result[0]\n                        faceUp = result[1]\n                    }\n                }\n                while (faceUp < 12 && faceDown >= 3) {\n                    result = getNewCards(faceDown, faceUp, 3)\n                    faceDown = result[0]\n                    faceUp = result[1]\n                }\n                state.numValidSets++;\n            } else {\n                alert(\"Not a valid set.\")\n            }\n\n            //Need to check if there are any more sets to be made if there are no cards left to flip\n            if (faceDown.length === 0 && (findSet(faceUp) === false)) {\n                console.log(\"i am here 2\")\n                return {\n                    faceUp: faceUp,\n                    faceDown: faceDown,\n                    selected: [],\n                    numValidSets: state.numValidSets,\n                    gameMode: state.gameMode,\n                    gameOver: true,\n                }\n            }\n\n            return {\n                faceUp: faceUp,\n                faceDown: faceDown,\n                selected: [],\n                numValidSets: state.numValidSets,\n                gameMode: state.gameMode,\n                gameOver: false,\n            }\n        } else if ((state.faceDown.length === 0) && (findSet(state.faceUp) === false)) {\n            console.log(\"i am here 3\")\n            return {\n                faceUp: state.faceUp,\n                faceDown: state.faceDown,\n                selected: state.selected.concat(action.index),\n                numValidSets: state.numValidSets,\n                gameMode: state.gameMode,\n                gameOver: true,\n            }\n        } else {\n            return {\n                faceUp: state.faceUp,\n                faceDown: state.faceDown,\n                selected: state.selected.concat(action.index),\n                numValidSets: state.numValidSets,\n                gameMode: state.gameMode,\n                gameOver: false,\n            }\n        }\n    }\n    return state;\n}\n"]},"metadata":{},"sourceType":"module"}