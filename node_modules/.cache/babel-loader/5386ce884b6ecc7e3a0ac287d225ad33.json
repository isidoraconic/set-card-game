{"ast":null,"code":"var _jsxFileName = \"/Users/isidoraconic/Desktop/set-game/src/components/Card.js\";\nimport Icon from \"./Icon\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport '../style/Card.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst shades = [\"rbga(235, 150, 170, 0.4)\", \"rgba(144, 205, 195, 0.4)\", \"rbga(207, 221, 142, 0.4)\"];\n\nclass Card extends React.Component {\n  onclick(action, index) {\n    this.props.dispatch({\n      type: action,\n      index: index\n    });\n  }\n\n  render() {\n    let icons = [];\n\n    for (let i = 0; i < this.props.attributes.shapeCount; i++) {\n      //Need to check what kind of \"fill\" the icon has; if it is solid, need to pass in the same colour as the outline, etc.\n      if (this.props.attributes.shade === \"solid\") {\n        icons.push( /*#__PURE__*/_jsxDEV(Icon, {\n          type: this.props.attributes.shape,\n          color: this.props.attributes.color,\n          fill: this.props.attributes.color\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 28\n        }, this));\n      } else if (this.props.attributes.shade === \"opaque\") {\n        if (this.props.attributes.color === \"#EB96AA\") {\n          console.log(\"I am pink!\");\n          console.log(this.props.attributes.color);\n          icons.push( /*#__PURE__*/_jsxDEV(Icon, {\n            type: this.props.attributes.shape,\n            color: this.props.attributes.color,\n            fill: \"pink\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 32\n          }, this));\n        } else if (this.props.attributes.color === \"#90CDC3\") {\n          console.log(\"I am green/blue!\");\n          console.log(this.props.attributes.color);\n          icons.push( /*#__PURE__*/_jsxDEV(Icon, {\n            type: this.props.attributes.shape,\n            color: this.props.attributes.color,\n            fill: shades[1]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 32\n          }, this));\n        } else {\n          console.log(\"I am green!\");\n          console.log(this.props.attributes.color);\n          icons.push( /*#__PURE__*/_jsxDEV(Icon, {\n            type: this.props.attributes.shape,\n            color: this.props.attributes.color,\n            fill: shades[2]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 32\n          }, this));\n        }\n      } else {\n        icons.push( /*#__PURE__*/_jsxDEV(Icon, {\n          type: this.props.attributes.shape,\n          color: this.props.attributes.color,\n          fill: this.props.attributes.shade\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 28\n        }, this));\n      }\n    }\n\n    ;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card\",\n      id: this.props.isSelected ? \"selected\" : \"not\",\n      onClick: () => this.onclick(\"SELECT\", this.props.index),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"icon-container\",\n        children: icons\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nlet mapDispatchToProps = function (dispatch, props) {\n  return {\n    dispatch: dispatch\n  };\n}; //TODO: is this necessary??\n\n\nlet mapStateToProps = function (state, props) {\n  return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Card);","map":{"version":3,"sources":["/Users/isidoraconic/Desktop/set-game/src/components/Card.js"],"names":["Icon","React","connect","shades","Card","Component","onclick","action","index","props","dispatch","type","render","icons","i","attributes","shapeCount","shade","push","shape","color","console","log","isSelected","mapDispatchToProps","mapStateToProps","state"],"mappings":"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","sourcesContent":["import Icon from \"./Icon\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport '../style/Card.css';\n\nconst shades = [\"rbga(235, 150, 170, 0.4)\", \"rgba(144, 205, 195, 0.4)\", \"rbga(207, 221, 142, 0.4)\"];\n\nclass Card extends React.Component {\n\n    onclick(action, index) { \n        this.props.dispatch({\n            type: action,\n            index: index\n        })\n    }\n\n    render() {\n        \n        let icons = [];\n\n        for(let i = 0; i < this.props.attributes.shapeCount; i++) {\n            \n            //Need to check what kind of \"fill\" the icon has; if it is solid, need to pass in the same colour as the outline, etc.\n            if(this.props.attributes.shade === \"solid\") {\n                icons.push(<Icon type={this.props.attributes.shape} color={this.props.attributes.color} fill={this.props.attributes.color}></Icon>);\n            } else if(this.props.attributes.shade === \"opaque\") {\n                if(this.props.attributes.color === \"#EB96AA\") {\n                    console.log(\"I am pink!\")\n                    console.log(this.props.attributes.color)\n                    icons.push(<Icon type={this.props.attributes.shape} color={this.props.attributes.color} fill=\"pink\"></Icon>);\n                } else if(this.props.attributes.color === \"#90CDC3\") {\n                    console.log(\"I am green/blue!\")\n                    console.log(this.props.attributes.color)\n                    icons.push(<Icon type={this.props.attributes.shape} color={this.props.attributes.color} fill={shades[1]}></Icon>);\n                } else {\n                    console.log(\"I am green!\")\n                    console.log(this.props.attributes.color)\n                    icons.push(<Icon type={this.props.attributes.shape} color={this.props.attributes.color} fill={shades[2]}></Icon>);\n                }\n            } else {\n                icons.push(<Icon type={this.props.attributes.shape} color={this.props.attributes.color} fill={this.props.attributes.shade}></Icon>);\n            }\n\n\n        };\n        \n        return (\n            <div className=\"card\" id={this.props.isSelected ? \"selected\" : \"not\"} onClick={() => this.onclick(\"SELECT\", this.props.index)}>\n                <div id=\"icon-container\">\n                    {icons}\n                </div>\n            </div>\n        )\n    }\n}\n\nlet mapDispatchToProps = function(dispatch, props) {\n    return {\n        dispatch: dispatch,\n    }\n  }\n  //TODO: is this necessary??\n  let mapStateToProps = function(state, props) {\n    return {}\n  }\n  \n  export default connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(Card)"]},"metadata":{},"sourceType":"module"}