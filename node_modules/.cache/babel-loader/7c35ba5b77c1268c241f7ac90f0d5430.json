{"ast":null,"code":"var _jsxFileName = \"/Users/isidoraconic/Desktop/set-game/src/components/Game.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Card from './Card';\nimport MODES from '../actions/GameModeEnum';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cardColors = [\"#EB96AA\", \"#90CDC3\", \"#7b5c00\"];\nconst cardShapes = [\"flower\", \"heart\", \"star\"];\nconst cardShades = [\"white\", \"solid\", \"black\"];\nconst cardShapeCount = [1, 2, 3];\nconst defaultDeck = generateDeck(); //Helper function for the isSet function, which checks if 3 attributes are all the same or all different\n//We then do this for all 4 attributes in a medium and hard level, and only 3 out of the 4 attributes in easy\n\nfunction validAttributeCondition(firstAttr, secondAttr, thirdAttr) {\n  return firstAttr === secondAttr && secondAttr === thirdAttr || firstAttr !== secondAttr && secondAttr !== thirdAttr;\n} //Function to check if three cards make a set\n\n\nfunction isSet(cardOne, cardTwo, cardThree) {\n  return validAttributeCondition(cardOne.shape, cardTwo.shape, cardThree.shape) && validAttributeCondition(cardOne.color, cardTwo.color, cardThree.color) && validAttributeCondition(cardOne.shade, cardTwo.shade, cardThree.shade) && validAttributeCondition(cardOne.shapeCount, cardTwo.shapeCount, cardThree.shapeCount);\n} // This method is from https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array \n//Randomly shuffles an array--we shuffle the arrays that hold cards such that when we flip 3 new cards off the top, they are random\n\n\nfunction shuffleArray(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n}\n\nfunction removeIndices(indices, indexList) {\n  for (const index in indices) {\n    indexList.splice(index, 1);\n  }\n\n  return indexList;\n}\n\nfunction getNewCards(faceDown, faceUp, numCards) {\n  if (faceDown.length === 0) {\n    return;\n  }\n\n  for (let i = 0; i < numCards; i++) {\n    faceUp.push(faceDown[i]);\n  }\n\n  faceDown.splice(0, numCards);\n} //Function that generates an 81 card deck with each of the 4 attributes \n\n\nfunction generateDeck(difficulty) {\n  let deck = [];\n\n  for (let i = 0; i < 3; i++) {\n    for (let j = 0; j < 3; j++) {\n      for (let h = 0; h < 3; h++) {\n        if (difficulty === MODES.EASY) {\n          let card = {\n            color: cardColors[i],\n            shape: cardShapes[j],\n            shade: cardShades[h],\n            shapeCount: 1\n          };\n          deck.push(card);\n        } else {\n          for (let k = 0; k < 3; k++) {\n            let card = {\n              color: cardColors[i],\n              shape: cardShapes[j],\n              shade: cardShades[h],\n              shapeCount: cardShapeCount[k]\n            };\n            deck.push(card);\n          }\n        }\n      }\n    }\n  }\n\n  shuffleArray(deck);\n  return deck;\n}\n\nclass Game extends React.Component {\n  //   if (action.type === \"START GAME\") {\n  //     let [faceDown, faceUp]= getNewCards(generateDeck(action.difficulty), [], 12)\n  //     return {\n  //         faceUp: faceUp,\n  //         faceDown: faceDown,\n  //         selected: [],\n  //         numValidSets: 0,\n  //         gameMode: action.difficulty\n  //     }\n  // }\n  // if(action.type === \"DRAW 3 CARDS\") {\n  //     let [faceDownTemp, faceUpTemp] = getNewCards(state.faceDown, state.faceUp, 3)\n  //     return {\n  //         faceUp: faceUpTemp,\n  //         faceDown: faceDownTemp,\n  //         selected: state.selected,\n  //         numValidSets: state.numValidSets,\n  //     }\n  // } \n  // if (action.type === \"CLEAR\") {\n  //     return {\n  //         faceUp: [],\n  //         faceDown: defaultDeck,\n  //         selected: [],\n  //         numValidSets: 0\n  //     }\n  // } \n  constructor(props) {\n    super(props);\n    let deck = generateDeck(this.props.mode);\n    this.state = {\n      faceDown: generateDeck(this.props.mode),\n      faceUp: [],\n      numValidSets: 0\n    };\n    getNewCards(this.state.faceDown, this.state.faceUp, 12);\n  }\n\n  drawCards() {\n    console.log(\"Drawing new cards\");\n    getNewCards(this.state.faceDown, this.state.faceUp, 3);\n  }\n\n  render() {\n    let renderedCards = this.state.faceUp.map((item, index) => {\n      // let isSelected = this.props.selected.includes(index)\n      return /*#__PURE__*/_jsxDEV(Card, {\n        attributes: item,\n        index: index\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 14\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.drawCards(),\n        children: \"Draw 3 Cards\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Number of valid sets: \", this.state.numValidSets]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Number of remaining cards: \", this.state.faceDown.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"deck\",\n        children: renderedCards\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nlet mapDispatchToProps = function (dispatch, props) {\n  return {\n    dispatch: dispatch\n  };\n};\n\nlet mapStateToProps = function (state, props) {\n  return {\n    mode: state.game.gameMode,\n    selected: state.game.selected\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","map":{"version":3,"sources":["/Users/isidoraconic/Desktop/set-game/src/components/Game.js"],"names":["React","connect","Card","MODES","cardColors","cardShapes","cardShades","cardShapeCount","defaultDeck","generateDeck","validAttributeCondition","firstAttr","secondAttr","thirdAttr","isSet","cardOne","cardTwo","cardThree","shape","color","shade","shapeCount","shuffleArray","array","i","length","j","Math","floor","random","removeIndices","indices","indexList","index","splice","getNewCards","faceDown","faceUp","numCards","push","difficulty","deck","h","EASY","card","k","Game","Component","constructor","props","mode","state","numValidSets","drawCards","console","log","render","renderedCards","map","item","mapDispatchToProps","dispatch","mapStateToProps","game","gameMode","selected"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport Card from './Card';\nimport MODES from '../actions/GameModeEnum'\n\nconst cardColors = [\"#EB96AA\", \"#90CDC3\", \"#7b5c00\"];\nconst cardShapes = [\"flower\", \"heart\", \"star\"];\nconst cardShades = [\"white\", \"solid\", \"black\"];\nconst cardShapeCount = [1, 2, 3];\nconst defaultDeck = generateDeck();\n\n//Helper function for the isSet function, which checks if 3 attributes are all the same or all different\n//We then do this for all 4 attributes in a medium and hard level, and only 3 out of the 4 attributes in easy\nfunction validAttributeCondition(firstAttr, secondAttr, thirdAttr) {\n    return (firstAttr === secondAttr && secondAttr === thirdAttr) || (firstAttr !== secondAttr && secondAttr !== thirdAttr);\n}\n\n//Function to check if three cards make a set\nfunction isSet(cardOne, cardTwo, cardThree) {\n    return validAttributeCondition(cardOne.shape, cardTwo.shape, cardThree.shape) && \n    validAttributeCondition(cardOne.color, cardTwo.color, cardThree.color) &&\n    validAttributeCondition(cardOne.shade, cardTwo.shade, cardThree.shade) && \n    validAttributeCondition(cardOne.shapeCount, cardTwo.shapeCount, cardThree.shapeCount)\n}\n\n// This method is from https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array \n//Randomly shuffles an array--we shuffle the arrays that hold cards such that when we flip 3 new cards off the top, they are random\nfunction shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n}\n\nfunction removeIndices(indices, indexList) {\n    for (const index in indices) {\n        indexList.splice(index, 1)\n    }\n    return indexList\n}\n\nfunction getNewCards(faceDown, faceUp, numCards) {\n    if (faceDown.length === 0) {\n        return;\n    }\n    for (let i = 0; i < numCards; i++) {\n        faceUp.push(faceDown[i])\n    }\n    faceDown.splice(0, numCards)\n}\n\n//Function that generates an 81 card deck with each of the 4 attributes \nfunction generateDeck(difficulty) {\n  let deck = [];\n\n  for(let i = 0; i < 3; i++) {\n      for(let j = 0; j < 3; j++) {\n          for(let h = 0; h < 3; h++) {\n              if (difficulty === MODES.EASY) {\n                  let card = {\n                      color: cardColors[i],\n                      shape: cardShapes[j],\n                      shade: cardShades[h],\n                      shapeCount: 1,\n                  }\n                  deck.push(card);\n              } else {\n                  for(let k = 0; k < 3; k++) {\n                      let card = {\n                          color: cardColors[i],\n                          shape: cardShapes[j],\n                          shade: cardShades[h],\n                          shapeCount: cardShapeCount[k],\n                      }\n                      deck.push(card);\n                  }\n              }\n          }\n      }\n  }\n  shuffleArray(deck)\n  return deck;\n}\n\n\nclass Game extends React.Component {\n\n//   if (action.type === \"START GAME\") {\n//     let [faceDown, faceUp]= getNewCards(generateDeck(action.difficulty), [], 12)\n//     return {\n//         faceUp: faceUp,\n//         faceDown: faceDown,\n//         selected: [],\n//         numValidSets: 0,\n//         gameMode: action.difficulty\n\n//     }\n// }\n// if(action.type === \"DRAW 3 CARDS\") {\n//     let [faceDownTemp, faceUpTemp] = getNewCards(state.faceDown, state.faceUp, 3)\n//     return {\n//         faceUp: faceUpTemp,\n//         faceDown: faceDownTemp,\n//         selected: state.selected,\n//         numValidSets: state.numValidSets,\n//     }\n\n// } \n// if (action.type === \"CLEAR\") {\n//     return {\n//         faceUp: [],\n//         faceDown: defaultDeck,\n//         selected: [],\n//         numValidSets: 0\n//     }\n// } \n\n  constructor(props) {\n    super(props);\n    let deck = generateDeck(this.props.mode);\n\n    this.state = {\n      faceDown: generateDeck(this.props.mode),\n      faceUp: [],\n      numValidSets: 0,\n    }\n    getNewCards(this.state.faceDown, this.state.faceUp, 12)\n  }\n\n  drawCards() {\n    console.log(\"Drawing new cards\")\n    getNewCards(this.state.faceDown, this.state.faceUp, 3)\n  }\n\n  render() {\n    let renderedCards = this.state.faceUp.map((item, index) => {\n      // let isSelected = this.props.selected.includes(index)\n      return <Card attributes={item} index={index}></Card>\n    });\n    return (\n      <div className=\"wrapper\">\n        <button onClick={() => this.drawCards()}>Draw 3 Cards</button>\n        <div>Number of valid sets: {this.state.numValidSets}</div>\n        <div>Number of remaining cards: {this.state.faceDown.length}</div>\n        <div className=\"deck\"> \n          {renderedCards}\n      </div>\n      </div>\n    )\n  }\n\n}\n\nlet mapDispatchToProps = function(dispatch, props) {\n  return {\n      dispatch: dispatch,\n  }\n}\n\nlet mapStateToProps = function(state, props) {\n    return {\n        mode: state.game.gameMode,\n        selected: state.game.selected,\n    }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Game)\n"]},"metadata":{},"sourceType":"module"}