{"ast":null,"code":"import MODES from '../actions/GameModeEnum';\nconst cardColors = [\"#EB96AA\", \"#90CDC3\", \"#FDFD96\"];\nconst cardShapes = [\"flower\", \"heart\", \"star\"];\nconst cardShades = [\"white\", \"solid\", \"black\"];\nconst cardShapeCount = [1, 2, 3];\nconst defaultDeck = generateDeck(); //Helper function for the isSet function, which checks if 3 attributes are all the same or all different\n//We then do this for all 4 attributes in a medium and hard level, and only 3 out of the 4 attributes in easy\n\nfunction validAttributeCondition(firstAttr, secondAttr, thirdAttr) {\n  return firstAttr === secondAttr && secondAttr === thirdAttr || firstAttr !== secondAttr && secondAttr !== thirdAttr;\n} //Function to check if three cards make a set\n\n\nfunction isSet(cardOne, cardTwo, cardThree) {\n  return validAttributeCondition(cardOne.shape, cardTwo.shape, cardThree.shape) && validAttributeCondition(cardOne.color, cardTwo.color, cardThree.color) && validAttributeCondition(cardOne.shade, cardTwo.shade, cardThree.shade) && validAttributeCondition(cardOne.shapeCount, cardTwo.shapeCount, cardThree.shapeCount);\n} // This method is from https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array \n//Randomly shuffles an array--we shuffle the arrays that hold cards such that when we flip 3 new cards off the top, they are random\n\n\nfunction shuffleArray(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n}\n\nfunction removeIndices(indices, indexList) {\n  for (const index in indices) {\n    indexList.splice(index, 1);\n  }\n\n  return indexList;\n}\n\nfunction getNewCards(faceDown, numCards) {\n  let returnFaceDown = faceDown.copy();\n  let returnFaceUp = [];\n\n  for (let i = 0; i < numCards; i++) {\n    returnFaceUp = returnFaceUp.concat(returnFaceDown[i]);\n  }\n\n  returnFaceDown.splice(0, numCards);\n  return [returnFaceDown, returnFaceUp];\n}\n\nexport default function DeckReducer(state = {\n  faceUp: [],\n  faceDown: [],\n  selected: [],\n  numValidSets: 0,\n  gameMode: null\n}, action) {\n  // This is the start of the game.\n  if (action.type === \"START GAME\") {\n    let deck = generateDeck(action.difficulty);\n    let faceUpTemp = [];\n    deck, faceUpTemp = getNewCards(deck, 12);\n    return {\n      faceUp: faceUpTemp,\n      faceDown: deck,\n      selected: [],\n      numValidSets: 0,\n      gameMode: action.difficulty\n    };\n  }\n\n  if (action.type === \"DRAW 3 CARDS\") {\n    let [faceDownTemp, faceUpTemp] = getNewCards(state.faceDown, state.faceUp);\n    return {\n      faceUp: faceUpTemp,\n      faceDown: faceDownTemp,\n      selected: state.selected,\n      numValidSets: state.numValidSets\n    };\n  }\n\n  if (action.type === \"CLEAR\") {\n    return {\n      faceUp: [],\n      faceDown: defaultDeck,\n      selected: [],\n      numValidSets: 0\n    };\n  }\n\n  if (action.type === \"SELECT\") {\n    let newSelected = [];\n\n    if (state.selected.includes(action.index)) {\n      newSelected = [...state.selected];\n      let elementIndex = state.selected.indexOf(action.index);\n      newSelected.splice(elementIndex, 1);\n      return {\n        faceUp: state.faceUp,\n        faceDown: state.faceDown,\n        selected: newSelected,\n        numValidSets: state.numValidSets\n      };\n    }\n\n    if (state.selected.length == 2) {\n      state.selected.push(action.index);\n      let validSet = isSet(state.faceUp[action.index], state.faceUp[state.selected[0]], state.faceUp[state.selected[1]]);\n\n      if (validSet) {\n        alert(\"Congrats, you created a valid set.\");\n        state.faceUp = removeIndices(state.selected, state.faceUp);\n        [state.faceDown, state.faceUp] = getNewCards(state.faceDown, state.faceUp);\n        state.numValidSets++;\n      } else {\n        alert(\"Not a valid set.\");\n      }\n\n      return {\n        faceUp: state.faceUp,\n        faceDown: state.faceDown,\n        selected: [],\n        numValidSets: state.numValidSets\n      };\n    } else {\n      let newSelected = state.selected.concat(action.index);\n      return {\n        faceUp: state.faceUp,\n        faceDown: state.faceDown,\n        selected: newSelected,\n        numValidSets: state.numValidSets\n      };\n    }\n  } else {\n    return state;\n  }\n} //Function that generates an 81 card deck with each of the 4 attributes \n\n_c = DeckReducer;\n\nfunction generateDeck(difficulty) {\n  let deck = [];\n\n  for (let i = 0; i < 3; i++) {\n    for (let j = 0; j < 3; j++) {\n      for (let h = 0; h < 3; h++) {\n        for (let k = 0; k < 3; k++) {\n          let numShapes = difficulty === MODES.EASY ? 1 : cardShapeCount[k];\n          let card = {\n            color: cardColors[i],\n            shape: cardShapes[j],\n            shade: cardShades[h],\n            shapeCount: numShapes\n          };\n          deck.push(card);\n        }\n      }\n    }\n  }\n\n  shuffleArray(deck);\n  return deck;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"DeckReducer\");","map":{"version":3,"sources":["/Users/isidoraconic/Desktop/set-game/src/reducers/DeckReducer.js"],"names":["MODES","cardColors","cardShapes","cardShades","cardShapeCount","defaultDeck","generateDeck","validAttributeCondition","firstAttr","secondAttr","thirdAttr","isSet","cardOne","cardTwo","cardThree","shape","color","shade","shapeCount","shuffleArray","array","i","length","j","Math","floor","random","removeIndices","indices","indexList","index","splice","getNewCards","faceDown","numCards","returnFaceDown","copy","returnFaceUp","concat","DeckReducer","state","faceUp","selected","numValidSets","gameMode","action","type","deck","difficulty","faceUpTemp","faceDownTemp","newSelected","includes","elementIndex","indexOf","push","validSet","alert","h","k","numShapes","EASY","card"],"mappings":"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","sourcesContent":["import MODES from '../actions/GameModeEnum';\n\nconst cardColors = [\"#EB96AA\", \"#90CDC3\", \"#FDFD96\"];\nconst cardShapes = [\"flower\", \"heart\", \"star\"];\nconst cardShades = [\"white\", \"solid\", \"black\"];\nconst cardShapeCount = [1, 2, 3];\nconst defaultDeck = generateDeck();\n\n//Helper function for the isSet function, which checks if 3 attributes are all the same or all different\n//We then do this for all 4 attributes in a medium and hard level, and only 3 out of the 4 attributes in easy\nfunction validAttributeCondition(firstAttr, secondAttr, thirdAttr) {\n    return (firstAttr === secondAttr && secondAttr === thirdAttr) || (firstAttr !== secondAttr && secondAttr !== thirdAttr);\n}\n\n//Function to check if three cards make a set\nfunction isSet(cardOne, cardTwo, cardThree) {\n    return validAttributeCondition(cardOne.shape, cardTwo.shape, cardThree.shape) && \n    validAttributeCondition(cardOne.color, cardTwo.color, cardThree.color) &&\n    validAttributeCondition(cardOne.shade, cardTwo.shade, cardThree.shade) && \n    validAttributeCondition(cardOne.shapeCount, cardTwo.shapeCount, cardThree.shapeCount)\n}\n\n// This method is from https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array \n//Randomly shuffles an array--we shuffle the arrays that hold cards such that when we flip 3 new cards off the top, they are random\nfunction shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n}\n\nfunction removeIndices(indices, indexList) {\n    for (const index in indices) {\n        indexList.splice(index, 1)\n    }\n    return indexList\n}\n\nfunction getNewCards(faceDown, numCards) {\n    let returnFaceDown = faceDown.copy()\n    let returnFaceUp = []\n    for (let i = 0; i < numCards; i++) {\n        returnFaceUp = returnFaceUp.concat(returnFaceDown[i])\n    }\n    returnFaceDown.splice(0, numCards)\n    return [returnFaceDown, returnFaceUp]\n}\n\nexport default function DeckReducer (\n    state = {\n        faceUp: [],\n        faceDown: [],\n        selected: [],\n        numValidSets: 0,\n        gameMode: null,\n    }, action) {\n        // This is the start of the game.\n        if (action.type === \"START GAME\") {\n            let deck = generateDeck(action.difficulty)\n            let faceUpTemp = []\n            deck, faceUpTemp = getNewCards(deck, 12)\n            return {\n                faceUp: faceUpTemp,\n                faceDown: deck,\n                selected: [],\n                numValidSets: 0,\n                gameMode: action.difficulty\n            }\n        }\n        if(action.type === \"DRAW 3 CARDS\") {\n            let [faceDownTemp, faceUpTemp] = getNewCards(state.faceDown, state.faceUp)\n            return {\n                faceUp: faceUpTemp,\n                faceDown: faceDownTemp,\n                selected: state.selected,\n                numValidSets: state.numValidSets,\n            }\n\n        } \n        if (action.type === \"CLEAR\") {\n            return {\n                faceUp: [],\n                faceDown: defaultDeck,\n                selected: [],\n                numValidSets: 0\n            }\n        } \n        if (action.type === \"SELECT\") {\n            let newSelected = []\n            if (state.selected.includes(action.index)) {\n                newSelected = [...state.selected]\n                let elementIndex = state.selected.indexOf(action.index)\n                newSelected.splice(elementIndex, 1)\n                return {\n                    faceUp: state.faceUp,\n                    faceDown: state.faceDown,\n                    selected: newSelected,\n                    numValidSets: state.numValidSets\n                }\n            }\n            if (state.selected.length == 2) {\n                state.selected.push(action.index);\n                let validSet = isSet(state.faceUp[action.index], state.faceUp[state.selected[0]], state.faceUp[state.selected[1]]);\n                if (validSet) {\n                    alert(\"Congrats, you created a valid set.\")\n                    state.faceUp = removeIndices(state.selected, state.faceUp);\n                    [state.faceDown, state.faceUp] = getNewCards(state.faceDown, state.faceUp);\n                    state.numValidSets++;\n                } else {\n                    alert(\"Not a valid set.\")\n                }\n                return {\n                    faceUp: state.faceUp,\n                    faceDown: state.faceDown,\n                    selected: [],\n                    numValidSets: state.numValidSets\n                }\n            } else {\n                let newSelected = state.selected.concat(action.index)\n                return {\n                    faceUp: state.faceUp,\n                    faceDown: state.faceDown,\n                    selected: newSelected,\n                    numValidSets: state.numValidSets,\n                }\n            }\n        } \n        else {\n            return state;\n        }\n    } \n\n    //Function that generates an 81 card deck with each of the 4 attributes \n    function generateDeck(difficulty) {\n        let deck = [];\n\n        for(let i = 0; i < 3; i++) {\n            for(let j = 0; j < 3; j++) {\n                for(let h = 0; h < 3; h++) {\n                    for(let k = 0; k < 3; k++) {\n                        let numShapes = difficulty === MODES.EASY ? 1 : cardShapeCount[k]\n                        let card = {\n                            color: cardColors[i],\n                            shape: cardShapes[j],\n                            shade: cardShades[h],\n                            shapeCount: numShapes,\n                        }\n                        deck.push(card);\n                    }\n                }\n            }\n        }\n        shuffleArray(deck)\n        return deck;\n    }\n"]},"metadata":{},"sourceType":"module"}