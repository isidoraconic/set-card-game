{"ast":null,"code":"const cardColors = [\"yellow\", \"blue\", \"red\"];\nconst cardShapes = [\"flower\", \"heart\", \"star\"];\nconst cardShades = [\"white\", \"orange\", \"purple\"];\nconst cardShapeCount = [1, 2, 3];\nconst defaultDeck = generateDeck();\n\nfunction validAttributeCondition(firstAttr, secondAttr, thirdAttr) {\n  return firstAttr === secondAttr && secondAttr === thirdAttr || firstAttr !== secondAttr && secondAttr !== thirdAttr;\n}\n\nfunction isSet(cardOne, cardTwo, cardThree) {\n  return validAttributeCondition(cardOne.shape, cardTwo.shape, cardThree.shape) && validAttributeCondition(cardOne.color, cardTwo.color, cardThree.color) && validAttributeCondition(cardOne.shade, cardTwo.shade, cardThree.shade) && validAttributeCondition(cardOne.shapeCount, cardTwo.shapeCount, cardThree.shapeCount);\n}\n/* This method is from https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array */\n\n\nfunction shuffleArray(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n}\n\nfunction removeIndices(indices, indexList) {\n  for (const index in indices) {\n    indexList.splice(index, 1);\n  }\n\n  return indexList;\n}\n\nfunction getNewCards(faceDown, faceUp) {\n  let returnFaceUp = faceUp.concat(faceDown[0]);\n  returnFaceUp = returnFaceUp.concat(faceDown[1]);\n  returnFaceUp = returnFaceUp.concat(faceDown[2]);\n  faceDown.splice(0, 3);\n  return [faceDown, returnFaceUp];\n}\n\nexport default function DeckReducer(state = {\n  faceUp: [],\n  faceDown: defaultDeck,\n  selected: [],\n  numValidSets: 0\n}, action) {\n  if (action.type === \"NEW CARD\") {\n    let [faceDownTemp, faceUpTemp] = getNewCards(state.deck.faceDown, state.deck.faceUp);\n    return {\n      faceUp: faceUpTemp,\n      faceDown: faceDownTemp,\n      selected: state.deck.selected,\n      numValidSets: state.deck.numValidSets\n    };\n  } else if (action.type === \"CLEAR\") {\n    return {\n      faceUp: [],\n      faceDown: defaultDeck,\n      selected: [],\n      numValidSets: 0\n    };\n  } else if (action.type === \"SELECT\") {\n    let newSelected = [];\n\n    if (state.deck.selected.includes(action.index)) {\n      newSelected = [...state.deck.selected];\n      let elementIndex = state.deck.selected.indexOf(action.index);\n      newSelected.splice(elementIndex, 1);\n      return {\n        faceUp: state.deck.faceUp,\n        faceDown: state.deck.faceDown,\n        selected: newSelected,\n        numValidSets: state.deck.numValidSets\n      };\n    }\n\n    if (state.deck.selected.length == 2) {\n      state.deck.selected.push(action.index);\n      let validSet = isSet(state.deck.faceUp[action.index], state.deck.faceUp[state.deck.selected[0]], state.deck.faceUp[state.deck.selected[1]]);\n\n      if (validSet) {\n        alert(\"Congrats, you created a valid set.\");\n        state.deck.faceUp = removeIndices(state.deck.selected, state.deck.faceUp);\n        [state.deck.faceDown, state.deck.faceUp] = getNewCards(state.deck.faceDown, state.deck.faceUp);\n        state.deck.numValidSets++;\n      } else {\n        alert(\"Not a valid set.\");\n      }\n\n      return {\n        faceUp: state.faceUp,\n        faceDown: state.faceDown,\n        selected: [],\n        numValidSets: state.numValidSets\n      };\n    } else {\n      let newSelected = state.selected.concat(action.index);\n      return {\n        faceUp: state.faceUp,\n        faceDown: state.faceDown,\n        selected: newSelected,\n        numValidSets: state.numValidSets\n      };\n    }\n  } else {\n    return state;\n  }\n}\n_c = DeckReducer;\n\nfunction generateDeck() {\n  let deck = [];\n\n  for (let i = 0; i < 3; i++) {\n    for (let j = 0; j < 3; j++) {\n      for (let h = 0; h < 3; h++) {\n        for (let k = 0; k < 3; k++) {\n          let card = {\n            color: cardColors[i],\n            shape: cardShapes[j],\n            shade: cardShades[h],\n            shapeCount: cardShapeCount[k]\n          };\n          deck.push(card);\n        }\n      }\n    }\n  }\n\n  shuffleArray(deck);\n  return deck;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"DeckReducer\");","map":{"version":3,"sources":["/Users/isidoraconic/Desktop/set-game/src/reducers/DeckReducer.js"],"names":["cardColors","cardShapes","cardShades","cardShapeCount","defaultDeck","generateDeck","validAttributeCondition","firstAttr","secondAttr","thirdAttr","isSet","cardOne","cardTwo","cardThree","shape","color","shade","shapeCount","shuffleArray","array","i","length","j","Math","floor","random","removeIndices","indices","indexList","index","splice","getNewCards","faceDown","faceUp","returnFaceUp","concat","DeckReducer","state","selected","numValidSets","action","type","faceDownTemp","faceUpTemp","deck","newSelected","includes","elementIndex","indexOf","push","validSet","alert","h","k","card"],"mappings":"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","sourcesContent":["const cardColors = [\"yellow\", \"blue\", \"red\"];\nconst cardShapes = [\"flower\", \"heart\", \"star\"];\nconst cardShades = [\"white\", \"orange\", \"purple\"];\nconst cardShapeCount = [1, 2, 3];\nconst defaultDeck = generateDeck();\n\nfunction validAttributeCondition(firstAttr, secondAttr, thirdAttr) {\n    return (firstAttr === secondAttr && secondAttr === thirdAttr) || (firstAttr !== secondAttr && secondAttr !== thirdAttr);\n}\n\nfunction isSet(cardOne, cardTwo, cardThree) {\n    return validAttributeCondition(cardOne.shape, cardTwo.shape, cardThree.shape) && \n    validAttributeCondition(cardOne.color, cardTwo.color, cardThree.color) &&\n    validAttributeCondition(cardOne.shade, cardTwo.shade, cardThree.shade) && \n    validAttributeCondition(cardOne.shapeCount, cardTwo.shapeCount, cardThree.shapeCount)\n}\n\n/* This method is from https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array */\nfunction shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n}\n\nfunction removeIndices(indices, indexList) {\n    for (const index in indices) {\n        indexList.splice(index, 1)\n    }\n    return indexList\n}\n\nfunction getNewCards(faceDown, faceUp) {\n    let returnFaceUp = faceUp.concat(faceDown[0])\n    returnFaceUp = returnFaceUp.concat(faceDown[1])\n    returnFaceUp = returnFaceUp.concat(faceDown[2])\n    faceDown.splice(0, 3)\n    return [faceDown, returnFaceUp]\n}\n\nexport default function DeckReducer (\n    state = {\n        faceUp: [],\n        faceDown: defaultDeck,\n        selected: [],\n        numValidSets: 0,\n    }, action) {\n        if(action.type === \"NEW CARD\") {\n            let [faceDownTemp, faceUpTemp] = getNewCards(state.deck.faceDown, state.deck.faceUp)\n            return {\n                faceUp: faceUpTemp,\n                faceDown: faceDownTemp,\n                selected: state.deck.selected,\n                numValidSets: state.deck.numValidSets,\n            }\n\n        } else if (action.type === \"CLEAR\") {\n            return {\n                faceUp: [],\n                faceDown: defaultDeck,\n                selected: [],\n                numValidSets: 0\n            }\n        } else if (action.type === \"SELECT\") {\n            let newSelected = []\n            if (state.deck.selected.includes(action.index)) {\n                newSelected = [...state.deck.selected]\n                let elementIndex = state.deck.selected.indexOf(action.index)\n                newSelected.splice(elementIndex, 1)\n                return {\n                    faceUp: state.deck.faceUp,\n                    faceDown: state.deck.faceDown,\n                    selected: newSelected,\n                    numValidSets: state.deck.numValidSets\n                }\n            }\n            if (state.deck.selected.length == 2) {\n                state.deck.selected.push(action.index);\n                let validSet = isSet(state.deck.faceUp[action.index], state.deck.faceUp[state.deck.selected[0]], state.deck.faceUp[state.deck.selected[1]]);\n                if (validSet) {\n                    alert(\"Congrats, you created a valid set.\")\n                    state.deck.faceUp = removeIndices(state.deck.selected, state.deck.faceUp);\n                    [state.deck.faceDown, state.deck.faceUp] = getNewCards(state.deck.faceDown, state.deck.faceUp);\n                    state.deck.numValidSets++;\n                } else {\n                    alert(\"Not a valid set.\")\n                }\n                return {\n                    faceUp: state.faceUp,\n                    faceDown: state.faceDown,\n                    selected: [],\n                    numValidSets: state.numValidSets\n                }\n            } else {\n                let newSelected = state.selected.concat(action.index)\n                return {\n                    faceUp: state.faceUp,\n                    faceDown: state.faceDown,\n                    selected: newSelected,\n                    numValidSets: state.numValidSets,\n                }\n            }\n        } \n        else {\n            return state;\n        }\n    }\n\n    function generateDeck() {\n        let deck = [];\n        for(let i = 0; i < 3; i++) {\n            for(let j = 0; j < 3; j++) {\n                for(let h = 0; h < 3; h++) {\n                    for(let k = 0; k < 3; k++) {\n                        \n                        let card = {\n                            color: cardColors[i],\n                            shape: cardShapes[j],\n                            shade: cardShades[h],\n                            shapeCount: cardShapeCount[k],\n                        }\n                        deck.push(card);\n                    }\n                }\n            }\n        }\n        shuffleArray(deck)\n        return deck;\n    }\n"]},"metadata":{},"sourceType":"module"}