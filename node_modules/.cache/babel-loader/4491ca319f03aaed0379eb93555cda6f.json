{"ast":null,"code":"var _jsxFileName = \"/Users/isidoraconic/Desktop/set-game/src/components/Rules.js\";\nimport React from 'react';\nimport '../style/Rules.css';\nimport ValidSet1 from '../images/valid-set1.png';\nimport ValidSet2 from '../images/valid-set2.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Rules extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rules-all-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"general-rules\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"General Rules:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"general-instructions\",\n          children: \"The objective of the game is to identify a SET of 3 cards from 12 cards placed face up. Each card has 4 features (color, fill, shape, and number of shapes per card). The aim of the game is to create SETs of these cards, based on these features. A SET is defined as 3 cards in whcih each of the cards' features, looked at one by one, are the SAME on each cards, or, are DIFFERENT on each card. All of the features must separately satisfy this rule. In other words, shape must be the same on all 3 cards, or different on each of the 3 cards, color must be the same on all 3 cards, or different on each of the 3, and the same goes for each of the 4 features of the cards. The game is complete when all SETs are found.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rules-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"rules\",\n          id: \"easy-rules\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Easy Level Rules\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"rules-content\",\n            id: \"easy-content\",\n            children: \"The easy game level only uses 3 of the 4 features of each card. In this case, the number of shapes on the card will always be 1 (number of shapes is not considered when making SETs). Because of this, you only have 27 cards total, and an easy game is won when the 9 SETs are found.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"rules\",\n          id: \"medium-rules\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Medium Level Rules\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"rules-content\",\n            id: \"medium-content\",\n            children: \"In a medium game, the game will use the normal 81 cards and all 4 features on the cards, and will automatically draw more cards if there is not an available set for the user to pick. Therefore, if there does not exist a SET within the 12 drawn cards, then 3 more cards are automatically drawn by the game (and will continue to be drawn 3 at a time automatically until a SET is possible). A medium game is won when al 27 SETs have been found.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"rules\",\n          id: \"hard-rules\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Hard Level Rules\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"rules-content\",\n            id: \"hard-content\",\n            children: \"In a hard game, the level uses the normal 81 cards and all 4 features on the cards when making SETs. It will NOT automatically draw cards for the player if there is not a possible SET to be made from the 12 displayed cards. A hard game is won when al 27 SETs have been found.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"photo-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Below are examples of valid sets: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: ValidSet1,\n          alt: \"Example 1 of a valid SET.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: ValidSet2,\n          alt: \"Example 2 of a valid SET.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/isidoraconic/Desktop/set-game/src/components/Rules.js"],"names":["React","ValidSet1","ValidSet2","Rules","Component","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,oBAAP;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;;AAEA,eAAe,MAAMC,KAAN,SAAoBH,KAAK,CAACI,SAA1B,CAAoC;AAC/CC,EAAAA,MAAM,GAAG;AAEL,wBACI;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAK,UAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAcI;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,gCACI;AAAK,UAAA,SAAS,EAAC,OAAf;AAAuB,UAAA,EAAE,EAAC,YAA1B;AAAA,kCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAK,YAAA,SAAS,EAAC,eAAf;AAA+B,YAAA,EAAE,EAAC,cAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAUI;AAAK,UAAA,SAAS,EAAC,OAAf;AAAuB,UAAA,EAAE,EAAC,cAA1B;AAAA,kCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAK,YAAA,SAAS,EAAC,eAAf;AAA+B,YAAA,EAAE,EAAC,gBAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAVJ,eAoBI;AAAK,UAAA,SAAS,EAAC,OAAf;AAAuB,UAAA,EAAE,EAAC,YAA1B;AAAA,kCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAK,YAAA,SAAS,EAAC,eAAf;AAA+B,YAAA,EAAE,EAAC,cAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBApBJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAdJ,eA2CI;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAK,UAAA,GAAG,EAAEJ,SAAV;AAAqB,UAAA,GAAG,EAAC;AAAzB;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAK,UAAA,GAAG,EAAEC,SAAV;AAAqB,UAAA,GAAG,EAAC;AAAzB;AAAA;AAAA;AAAA;AAAA,gBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,cA3CJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAmDH;;AAtD8C","sourcesContent":["import React from 'react';\nimport '../style/Rules.css';\nimport ValidSet1 from '../images/valid-set1.png';\nimport ValidSet2 from '../images/valid-set2.png';\n\nexport default class Rules extends React.Component {\n    render() {\n\n        return (\n            <div className=\"rules-all-container\">\n                <div className=\"general-rules\">\n                    <h2>General Rules:</h2>\n                    <div className=\"general-instructions\">\n                        The objective of the game is to identify a SET of 3 cards from 12 cards placed face up. \n                        Each card has 4 features (color, fill, shape, and number of shapes per card). The aim of the \n                        game is to create SETs of these cards, based on these features. A SET is defined as 3 cards\n                        in whcih each of the cards' features, looked at one by one, are the SAME on each cards, or, \n                        are DIFFERENT on each card. All of the features must separately satisfy this rule. In other \n                        words, shape must be the same on all 3 cards, or different on each of the 3 cards, color must\n                        be the same on all 3 cards, or different on each of the 3, and the same goes for each of the \n                        4 features of the cards. The game is complete when all SETs are found.\n                    </div>\n                </div> \n                <div className=\"rules-container\">\n                    <div className=\"rules\" id=\"easy-rules\">\n                        <h3>Easy Level Rules</h3>\n                        <div className=\"rules-content\" id=\"easy-content\">\n                        The easy game level only uses 3 of the 4 features of each card. In this case, the number of \n                        shapes on the card will always be 1 (number of shapes is not considered when making SETs).  \n                        Because of this, you only have 27 cards total, and an easy game is won when the 9 SETs are\n                        found.\n                        </div>\n                    </div>\n                    <div className=\"rules\" id=\"medium-rules\">\n                        <h3>Medium Level Rules</h3>\n                        <div className=\"rules-content\" id=\"medium-content\">\n                        In a medium game, the game will use the normal 81 cards and all 4 features on the cards, and \n                        will automatically draw more cards if there is not an available set for the user to pick. \n                        Therefore, if there does not exist a SET within the 12 drawn cards, then 3 more cards are \n                        automatically drawn by the game (and will continue to be drawn 3 at a time automatically \n                        until a SET is possible). A medium game is won when al 27 SETs have been found.\n                        </div>\n                    </div>\n                    <div className=\"rules\" id=\"hard-rules\">\n                        <h3>Hard Level Rules</h3>\n                        <div className=\"rules-content\" id=\"hard-content\">\n                        In a hard game, the level uses the normal 81 cards and all 4 features on the cards when making \n                        SETs. It will NOT automatically draw cards for the player if there is not a possible SET to be\n                        made from the 12 displayed cards. A hard game is won when al 27 SETs have been found.\n                        </div>\n                    </div>\n                </div>\n                <div className=\"photo-container\">\n                    <h4>Below are examples of valid sets: </h4>\n                    <img src={ValidSet1} alt=\"Example 1 of a valid SET.\"/>\n                    <img src={ValidSet2} alt=\"Example 2 of a valid SET.\"/>\n                </div>\n            </div>\n        )\n    }\n\n}"]},"metadata":{},"sourceType":"module"}