{"ast":null,"code":"const cardColors = [\"yellow\", \"blue\", \"red\"];\nconst cardShapes = [\"flower\", \"heart\", \"star\"];\nconst cardShades = [\"white\", \"orange\", \"purple\"];\nconst cardShapeCount = [1, 2, 3];\nconst defaultDeck = generateDeck();\n\nfunction validAttributeCondition(firstAttr, secondAttr, thirdAttr) {\n  return firstAttr === secondAttr && secondAttr === thirdAttr || firstAttr !== secondAttr && secondAttr !== thirdAttr;\n}\n\nfunction isSet(cardOne, cardTwo, cardThree) {\n  return validAttributeCondition(cardOne.shape, cardTwo.shape, cardThree.shape) && validAttributeCondition(cardOne.color, cardTwo.color, cardThree.color) && validAttributeCondition(cardOne.shade, cardTwo.shade, cardThree.shade) && validAttributeCondition(cardOne.shapeCount, cardTwo.shapeCount, cardThree.shapeCount);\n}\n\nfunction getNewCardIndices(numCardsRemaining) {\n  let firstIndex = randomNum(0, numCardsRemaining - 1);\n  let secondIndex = randomNum(0, numCardsRemaining - 1);\n\n  while (secondIndex !== firstIndex) {\n    secondIndex = randomNum(0, numCardsRemaining - 1);\n  }\n\n  let thirdIndex = randomNum(0, numCardsRemaining - 1);\n\n  while (thirdIndex !== secondIndex) {\n    thirdIndex = randomNum(0, numCardsRemaining - 1);\n  }\n\n  return [firstIndex, secondIndex, thirdIndex];\n}\n\nfunction removeIndices(indices, indexList) {\n  for (const index in indices) {\n    indexList.splice(index, 1);\n  }\n\n  return indexList;\n}\n\nfunction getNewCards(faceDown, faceUp) {\n  let indices = getNewCardIndices(faceDown.length);\n  console.log(indices[0]);\n  console.log(indices[1]);\n  console.log(indices[2]);\n  faceUp.push(faceDown[indices[0]]);\n  faceUp.push(faceDown[indices[1]]);\n  faceUp.push(faceDown[indices[2]]);\n  removeIndices(indices, faceDown);\n  return [faceDown, faceUp];\n}\n\nexport default function DeckReducer(state = {\n  faceUp: [],\n  faceDown: defaultDeck,\n  selected: [],\n  numValidSets: 0\n}, action) {\n  if (action.type === \"NEW CARD\") {\n    let flipIndex = randomNum(0, state.faceDown.length - 1);\n    let flippedCard = state.faceDown[flipIndex];\n    state.faceDown.splice(flipIndex, 1);\n    return {\n      faceUp: state.faceUp.concat(flippedCard),\n      faceDown: state.faceDown,\n      selected: state.selected\n    }; // [state.faceDown, state.faceUp] = getNewCards(state.faceDown, state.faceUp)\n    // console.log(state.faceDown.length)\n    // console.log(state.faceUp.length)\n    // return {\n    //     faceUp: state.faceUp,\n    //     faceDown: state.faceDown,\n    //     selected: state.selected,\n    //     numValidSets: state.numValidSets,\n    // }\n  } else if (action.type === \"CLEAR\") {\n    return {\n      faceUp: [],\n      faceDown: defaultDeck,\n      selected: [],\n      numValidSets: 0\n    };\n  } else if (action.type === \"SELECT\") {\n    if (state.selected.length == 2) {\n      state.selected.push(action.index);\n      let validSet = isSet(state.faceUp[action.index], state.faceUp[state.selected[0]], state.faceUp[state.selected[1]]);\n\n      if (validSet) {\n        alert(\"Congrats, you created a valid set.\");\n        state.faceUp = removeIndices(state.selected, state.faceUp);\n        [state.faceDown, state.faceUp] = getNewCards(state.faceDown, state.faceUp);\n        state.numValidSets++;\n      } else {\n        alert(\"Not a valid set.\");\n      }\n\n      return {\n        faceUp: state.faceUp,\n        faceDown: state.faceDown,\n        selected: [],\n        numValidSets: state.numValidSets\n      };\n    } else {\n      state.selected.push(action.index);\n    }\n  } else {\n    return state;\n  }\n} //this function is from: https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript \n\n_c = DeckReducer;\n\nfunction randomNum(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction generateDeck() {\n  let deck = [];\n\n  for (let i = 0; i < 3; i++) {\n    for (let j = 0; j < 3; j++) {\n      for (let h = 0; h < 3; h++) {\n        for (let k = 0; k < 3; k++) {\n          let card = {\n            color: cardColors[i],\n            shape: cardShapes[j],\n            shade: cardShades[h],\n            shapeCount: cardShapeCount[k]\n          };\n          deck.push(card);\n        }\n      }\n    }\n  }\n\n  return deck;\n}\n\nfunction findIndexOf(arr, target) {\n  for (var i = 0, len = arr.length; i < len; i++) {\n    if (arr[i] === target) return i;\n  }\n\n  return -1;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"DeckReducer\");","map":{"version":3,"sources":["/Users/isidoraconic/Desktop/web-projects/set-game/src/reducers/DeckReducer.js"],"names":["cardColors","cardShapes","cardShades","cardShapeCount","defaultDeck","generateDeck","validAttributeCondition","firstAttr","secondAttr","thirdAttr","isSet","cardOne","cardTwo","cardThree","shape","color","shade","shapeCount","getNewCardIndices","numCardsRemaining","firstIndex","randomNum","secondIndex","thirdIndex","removeIndices","indices","indexList","index","splice","getNewCards","faceDown","faceUp","length","console","log","push","DeckReducer","state","selected","numValidSets","action","type","flipIndex","flippedCard","concat","validSet","alert","min","max","Math","floor","random","deck","i","j","h","k","card","findIndexOf","arr","target","len"],"mappings":"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","sourcesContent":["const cardColors = [\"yellow\", \"blue\", \"red\"];\nconst cardShapes = [\"flower\", \"heart\", \"star\"];\nconst cardShades = [\"white\", \"orange\", \"purple\"];\nconst cardShapeCount = [1, 2, 3];\nconst defaultDeck = generateDeck();\n\nfunction validAttributeCondition(firstAttr, secondAttr, thirdAttr) {\n    return (firstAttr === secondAttr && secondAttr === thirdAttr) || (firstAttr !== secondAttr && secondAttr !== thirdAttr);\n}\n\nfunction isSet(cardOne, cardTwo, cardThree) {\n    return validAttributeCondition(cardOne.shape, cardTwo.shape, cardThree.shape) && \n    validAttributeCondition(cardOne.color, cardTwo.color, cardThree.color) &&\n    validAttributeCondition(cardOne.shade, cardTwo.shade, cardThree.shade) && \n    validAttributeCondition(cardOne.shapeCount, cardTwo.shapeCount, cardThree.shapeCount)\n}\n\nfunction getNewCardIndices(numCardsRemaining) {\n    let firstIndex = randomNum(0, numCardsRemaining - 1);\n    let secondIndex = randomNum(0, numCardsRemaining - 1);\n    while (secondIndex !== firstIndex) {\n        secondIndex = randomNum(0, numCardsRemaining - 1);\n    }\n    let thirdIndex = randomNum(0, numCardsRemaining - 1);\n    while (thirdIndex !== secondIndex) {\n        thirdIndex = randomNum(0, numCardsRemaining - 1);\n    }\n    return [firstIndex, secondIndex, thirdIndex];\n}\n\nfunction removeIndices(indices, indexList) {\n    for (const index in indices) {\n        indexList.splice(index, 1)\n    }\n    return indexList\n}\n\nfunction getNewCards(faceDown, faceUp) {\n    let indices = getNewCardIndices(faceDown.length)\n    console.log(indices[0])\n    console.log(indices[1])\n    console.log(indices[2])\n    faceUp.push(faceDown[indices[0]])\n    faceUp.push(faceDown[indices[1]])\n    faceUp.push(faceDown[indices[2]])\n    removeIndices(indices, faceDown)\n    return [faceDown, faceUp]\n}\n\nexport default function DeckReducer (\n    state = {\n        faceUp: [],\n        faceDown: defaultDeck,\n        selected: [],\n        numValidSets: 0,\n    }, action) {\n        if(action.type === \"NEW CARD\") {\n            let flipIndex = randomNum(0, (state.faceDown.length-1));\n            let flippedCard = state.faceDown[flipIndex];\n            state.faceDown.splice(flipIndex, 1);\n            return {\n                faceUp: state.faceUp.concat(flippedCard),\n                faceDown: state.faceDown,\n                selected: state.selected,\n            } \n            // [state.faceDown, state.faceUp] = getNewCards(state.faceDown, state.faceUp)\n            // console.log(state.faceDown.length)\n            // console.log(state.faceUp.length)\n            // return {\n            //     faceUp: state.faceUp,\n            //     faceDown: state.faceDown,\n            //     selected: state.selected,\n            //     numValidSets: state.numValidSets,\n            // }\n\n        } else if (action.type === \"CLEAR\") {\n            return {\n                faceUp: [],\n                faceDown: defaultDeck,\n                selected: [],\n                numValidSets: 0\n            }\n        } else if (action.type === \"SELECT\") {\n            if (state.selected.length == 2) {\n                state.selected.push(action.index);\n                let validSet = isSet(state.faceUp[action.index], state.faceUp[state.selected[0]], state.faceUp[state.selected[1]]);\n                if (validSet) {\n                    alert(\"Congrats, you created a valid set.\")\n                    state.faceUp = removeIndices(state.selected, state.faceUp);\n                    [state.faceDown, state.faceUp] = getNewCards(state.faceDown, state.faceUp);\n                    state.numValidSets++;\n                } else {\n                    alert(\"Not a valid set.\")\n                }\n                return {\n                    faceUp: state.faceUp,\n                    faceDown: state.faceDown,\n                    selected: [],\n                    numValidSets: state.numValidSets\n                }\n            } else {\n                state.selected.push(action.index)\n            }\n        } \n        else {\n            return state;\n        }\n    }\n\n    //this function is from: https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript \n    function randomNum(min, max) {\n        return Math.floor(Math.random() * (max - min + 1) + min);\n      }\n\n    function generateDeck() {\n        let deck = [];\n        for(let i = 0; i < 3; i++) {\n            for(let j = 0; j < 3; j++) {\n                for(let h = 0; h < 3; h++) {\n                    for(let k = 0; k < 3; k++) {\n                        \n                        let card = {\n                            color: cardColors[i],\n                            shape: cardShapes[j],\n                            shade: cardShades[h],\n                            shapeCount: cardShapeCount[k],\n                        }\n                        deck.push(card);\n                    }\n                }\n            }\n        }\n        return deck;\n    }\n\n    function findIndexOf(arr, target) {\n        for(var i = 0, len = arr.length; i < len; i++) {\n            if (arr[i] === target) return i;\n        }\n        return -1;\n    }\n"]},"metadata":{},"sourceType":"module"}