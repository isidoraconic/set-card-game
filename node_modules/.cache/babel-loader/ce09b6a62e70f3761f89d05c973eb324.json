{"ast":null,"code":"const cardColors = [\"yellow\", \"blue\", \"red\"];\nconst cardShapes = [\"flower\", \"heart\", \"star\"];\nconst cardShades = [\"white\", \"orange\", \"purple\"];\nconst cardShapeCount = [1, 2, 3];\nconst defaultDeck = generateDeck();\n\nfunction validAttributeCondition(firstAttr, secondAttr, thirdAttr) {\n  return firstAttr === secondAttr && secondAttr === thirdAttr || firstAttr !== secondAttr && secondAttr !== thirdAttr;\n}\n\nfunction isSet(cardOne, cardTwo, cardThree) {\n  return validAttributeCondition(cardOne.shape, cardTwo.shape, cardThree.shape) && validAttributeCondition(cardOne.color, cardTwo.color, cardThree.color) && validAttributeCondition(cardOne.shade, cardTwo.shade, cardThree.shade) && validAttributeCondition(cardOne.shapeCount, cardTwo.shapeCount, cardThree.shapeCount);\n}\n/* This method is from https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array */\n\n\nfunction shuffleArray(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n}\n\nfunction getNewCards(faceDown, faceUp) {\n  faceUp.push(faceDown[0]);\n  faceUp.push(faceDown[1]);\n  faceUp.push(faceDown[2]);\n  return [faceDown, faceUp];\n}\n\nexport default function DeckReducer(state = {\n  faceUp: [],\n  faceDown: defaultDeck,\n  selected: [],\n  numValidSets: 0\n}, action) {\n  if (action.type === \"NEW CARD\") {\n    // let flipIndex = randomNum(0, (state.faceDown.length-1));\n    // let flippedCard = state.faceDown[flipIndex];\n    // state.faceDown.splice(flipIndex, 1);\n    // return {\n    //     faceUp: state.faceUp.concat(flippedCard),\n    //     faceDown: state.faceDown,\n    //     selected: state.selected,\n    // } \n    [state.faceDown, state.faceUp] = getNewCards(state.faceDown, state.faceUp);\n    return {\n      faceUp: state.faceUp,\n      faceDown: state.faceDown,\n      selected: state.selected,\n      numValidSets: state.numValidSets\n    };\n  } else if (action.type === \"CLEAR\") {\n    return {\n      faceUp: [],\n      faceDown: defaultDeck,\n      selected: [],\n      numValidSets: 0\n    };\n  } else if (action.type === \"SELECT\") {\n    if (state.selected.length == 2) {\n      state.selected.push(action.index);\n      let validSet = isSet(state.faceUp[action.index], state.faceUp[state.selected[0]], state.faceUp[state.selected[1]]);\n\n      if (validSet) {\n        alert(\"Congrats, you created a valid set.\");\n        state.faceUp.splice(0, 3)[(state.faceDown, state.faceUp)] = getNewCards(state.faceDown, state.faceUp);\n        state.numValidSets++;\n      } else {\n        alert(\"Not a valid set.\");\n      }\n\n      return {\n        faceUp: state.faceUp,\n        faceDown: state.faceDown,\n        selected: [],\n        numValidSets: state.numValidSets\n      };\n    } else {\n      state.selected.push(action.index);\n    }\n  } else {\n    return state;\n  }\n} //this function is from: https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript \n\n_c = DeckReducer;\n\nfunction randomNum(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction generateDeck() {\n  let deck = [];\n\n  for (let i = 0; i < 3; i++) {\n    for (let j = 0; j < 3; j++) {\n      for (let h = 0; h < 3; h++) {\n        for (let k = 0; k < 3; k++) {\n          let card = {\n            color: cardColors[i],\n            shape: cardShapes[j],\n            shade: cardShades[h],\n            shapeCount: cardShapeCount[k]\n          };\n          deck.push(card);\n        }\n      }\n    }\n  }\n\n  return deck;\n}\n\nfunction findIndexOf(arr, target) {\n  for (var i = 0, len = arr.length; i < len; i++) {\n    if (arr[i] === target) return i;\n  }\n\n  return -1;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"DeckReducer\");","map":{"version":3,"sources":["/Users/isidoraconic/Desktop/web-projects/set-game/src/reducers/DeckReducer.js"],"names":["cardColors","cardShapes","cardShades","cardShapeCount","defaultDeck","generateDeck","validAttributeCondition","firstAttr","secondAttr","thirdAttr","isSet","cardOne","cardTwo","cardThree","shape","color","shade","shapeCount","shuffleArray","array","i","length","j","Math","floor","random","getNewCards","faceDown","faceUp","push","DeckReducer","state","selected","numValidSets","action","type","index","validSet","alert","splice","randomNum","min","max","deck","h","k","card","findIndexOf","arr","target","len"],"mappings":"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","sourcesContent":["const cardColors = [\"yellow\", \"blue\", \"red\"];\nconst cardShapes = [\"flower\", \"heart\", \"star\"];\nconst cardShades = [\"white\", \"orange\", \"purple\"];\nconst cardShapeCount = [1, 2, 3];\nconst defaultDeck = generateDeck();\n\nfunction validAttributeCondition(firstAttr, secondAttr, thirdAttr) {\n    return (firstAttr === secondAttr && secondAttr === thirdAttr) || (firstAttr !== secondAttr && secondAttr !== thirdAttr);\n}\n\nfunction isSet(cardOne, cardTwo, cardThree) {\n    return validAttributeCondition(cardOne.shape, cardTwo.shape, cardThree.shape) && \n    validAttributeCondition(cardOne.color, cardTwo.color, cardThree.color) &&\n    validAttributeCondition(cardOne.shade, cardTwo.shade, cardThree.shade) && \n    validAttributeCondition(cardOne.shapeCount, cardTwo.shapeCount, cardThree.shapeCount)\n}\n\n/* This method is from https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array */\nfunction shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n}\n\nfunction getNewCards(faceDown, faceUp) {\n    faceUp.push(faceDown[0])\n    faceUp.push(faceDown[1])\n    faceUp.push(faceDown[2])\n    return [faceDown, faceUp]\n}\n\nexport default function DeckReducer (\n    state = {\n        faceUp: [],\n        faceDown: defaultDeck,\n        selected: [],\n        numValidSets: 0,\n    }, action) {\n        if(action.type === \"NEW CARD\") {\n            // let flipIndex = randomNum(0, (state.faceDown.length-1));\n            // let flippedCard = state.faceDown[flipIndex];\n            // state.faceDown.splice(flipIndex, 1);\n            // return {\n            //     faceUp: state.faceUp.concat(flippedCard),\n            //     faceDown: state.faceDown,\n            //     selected: state.selected,\n            // } \n            [state.faceDown, state.faceUp] = getNewCards(state.faceDown, state.faceUp)\n            return {\n                faceUp: state.faceUp,\n                faceDown: state.faceDown,\n                selected: state.selected,\n                numValidSets: state.numValidSets,\n            }\n\n        } else if (action.type === \"CLEAR\") {\n            return {\n                faceUp: [],\n                faceDown: defaultDeck,\n                selected: [],\n                numValidSets: 0\n            }\n        } else if (action.type === \"SELECT\") {\n            if (state.selected.length == 2) {\n                state.selected.push(action.index);\n                let validSet = isSet(state.faceUp[action.index], state.faceUp[state.selected[0]], state.faceUp[state.selected[1]]);\n                if (validSet) {\n                    alert(\"Congrats, you created a valid set.\")\n                    state.faceUp.splice(0, 3)\n                    [state.faceDown, state.faceUp] = getNewCards(state.faceDown, state.faceUp);\n                    state.numValidSets++;\n                } else {\n                    alert(\"Not a valid set.\")\n                }\n                return {\n                    faceUp: state.faceUp,\n                    faceDown: state.faceDown,\n                    selected: [],\n                    numValidSets: state.numValidSets\n                }\n            } else {\n                state.selected.push(action.index)\n            }\n        } \n        else {\n            return state;\n        }\n    }\n\n    //this function is from: https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript \n    function randomNum(min, max) {\n        return Math.floor(Math.random() * (max - min + 1) + min);\n      }\n\n    function generateDeck() {\n        let deck = [];\n        for(let i = 0; i < 3; i++) {\n            for(let j = 0; j < 3; j++) {\n                for(let h = 0; h < 3; h++) {\n                    for(let k = 0; k < 3; k++) {\n                        \n                        let card = {\n                            color: cardColors[i],\n                            shape: cardShapes[j],\n                            shade: cardShades[h],\n                            shapeCount: cardShapeCount[k],\n                        }\n                        deck.push(card);\n                    }\n                }\n            }\n        }\n        return deck;\n    }\n\n    function findIndexOf(arr, target) {\n        for(var i = 0, len = arr.length; i < len; i++) {\n            if (arr[i] === target) return i;\n        }\n        return -1;\n    }\n"]},"metadata":{},"sourceType":"module"}