{"ast":null,"code":"import MODES from '../actions/GameModeEnum';\nexport default function DeckReducer(state = {\n  faceUp: [],\n  faceDown: [],\n  selected: [],\n  numValidSets: 0,\n  gameMode: null\n}, action) {\n  // This is the start of the game.\n  // if (action.type === \"START GAME\") {\n  //     let [faceDown, faceUp]= getNewCards(generateDeck(action.difficulty), [], 12)\n  //     return {\n  //         faceUp: faceUp,\n  //         faceDown: faceDown,\n  //         selected: [],\n  //         numValidSets: 0,\n  //         gameMode: action.difficulty\n  //     }\n  // }\n  // if(action.type === \"DRAW 3 CARDS\") {\n  //     let [faceDownTemp, faceUpTemp] = getNewCards(state.faceDown, state.faceUp, 3)\n  //     return {\n  //         faceUp: faceUpTemp,\n  //         faceDown: faceDownTemp,\n  //         selected: state.selected,\n  //         numValidSets: state.numValidSets,\n  //     }\n  // } \n  // if (action.type === \"CLEAR\") {\n  //     return {\n  //         faceUp: [],\n  //         faceDown: defaultDeck,\n  //         selected: [],\n  //         numValidSets: 0\n  //     }\n  // } \n  // if (action.type === \"SELECT\") {\n  //     return {\n  //         selected: selected.concat(action.index)\n  //     }\n  // let newSelected = []\n  // if (state.selected.includes(action.index)) {\n  //     newSelected = [...state.selected]\n  //     let elementIndex = state.selected.indexOf(action.index)\n  //     newSelected.splice(elementIndex, 1)\n  //     return {\n  //         faceUp: state.faceUp,\n  //         faceDown: state.faceDown,\n  //         selected: newSelected,\n  //         numValidSets: state.numValidSets\n  //     }\n  // }\n  // if (state.selected.length == 2) {\n  //     state.selected.push(action.index);\n  //     let validSet = isSet(state.faceUp[action.index], state.faceUp[state.selected[0]], state.faceUp[state.selected[1]]);\n  //     if (validSet) {\n  //         alert(\"Congrats, you created a valid set.\")\n  //         state.faceUp = removeIndices(state.selected, state.faceUp);\n  //         [state.faceDown, state.faceUp] = getNewCards(state.faceDown, state.faceUp, 3);\n  //         state.numValidSets++;\n  //     } else {\n  //         alert(\"Not a valid set.\")\n  //     }\n  //     return {\n  //         faceUp: state.faceUp,\n  //         faceDown: state.faceDown,\n  //         selected: [],\n  //         numValidSets: state.numValidSets\n  //     }\n  // } else {\n  //     let newSelected = state.selected.concat(action.index)\n  //     return {\n  //         faceUp: state.faceUp,\n  //         faceDown: state.faceDown,\n  //         selected: newSelected,\n  //         numValidSets: state.numValidSets,\n  //     }\n  // }\n  return state;\n}\n_c = DeckReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeckReducer\");","map":{"version":3,"sources":["/Users/isidoraconic/Desktop/set-game/src/reducers/DeckReducer.js"],"names":["MODES","DeckReducer","state","faceUp","faceDown","selected","numValidSets","gameMode","action"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,yBAAlB;AAEA,eAAe,SAASC,WAAT,CACXC,KAAK,GAAG;AACJC,EAAAA,MAAM,EAAE,EADJ;AAEJC,EAAAA,QAAQ,EAAE,EAFN;AAGJC,EAAAA,QAAQ,EAAE,EAHN;AAIJC,EAAAA,YAAY,EAAE,CAJV;AAKJC,EAAAA,QAAQ,EAAE;AALN,CADG,EAORC,MAPQ,EAOA;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACJ,SAAON,KAAP;AACH;KAhFmBD,W","sourcesContent":["import MODES from '../actions/GameModeEnum';\n\nexport default function DeckReducer (\n    state = {\n        faceUp: [],\n        faceDown: [],\n        selected: [],\n        numValidSets: 0,\n        gameMode: null,\n    }, action) {\n        // This is the start of the game.\n        // if (action.type === \"START GAME\") {\n        //     let [faceDown, faceUp]= getNewCards(generateDeck(action.difficulty), [], 12)\n        //     return {\n        //         faceUp: faceUp,\n        //         faceDown: faceDown,\n        //         selected: [],\n        //         numValidSets: 0,\n        //         gameMode: action.difficulty\n        //     }\n        // }\n        // if(action.type === \"DRAW 3 CARDS\") {\n        //     let [faceDownTemp, faceUpTemp] = getNewCards(state.faceDown, state.faceUp, 3)\n        //     return {\n        //         faceUp: faceUpTemp,\n        //         faceDown: faceDownTemp,\n        //         selected: state.selected,\n        //         numValidSets: state.numValidSets,\n        //     }\n\n        // } \n        // if (action.type === \"CLEAR\") {\n        //     return {\n        //         faceUp: [],\n        //         faceDown: defaultDeck,\n        //         selected: [],\n        //         numValidSets: 0\n        //     }\n        // } \n        // if (action.type === \"SELECT\") {\n        //     return {\n        //         selected: selected.concat(action.index)\n        //     }\n            // let newSelected = []\n            // if (state.selected.includes(action.index)) {\n            //     newSelected = [...state.selected]\n            //     let elementIndex = state.selected.indexOf(action.index)\n            //     newSelected.splice(elementIndex, 1)\n            //     return {\n            //         faceUp: state.faceUp,\n            //         faceDown: state.faceDown,\n            //         selected: newSelected,\n            //         numValidSets: state.numValidSets\n            //     }\n            // }\n            // if (state.selected.length == 2) {\n            //     state.selected.push(action.index);\n            //     let validSet = isSet(state.faceUp[action.index], state.faceUp[state.selected[0]], state.faceUp[state.selected[1]]);\n            //     if (validSet) {\n            //         alert(\"Congrats, you created a valid set.\")\n            //         state.faceUp = removeIndices(state.selected, state.faceUp);\n            //         [state.faceDown, state.faceUp] = getNewCards(state.faceDown, state.faceUp, 3);\n            //         state.numValidSets++;\n            //     } else {\n            //         alert(\"Not a valid set.\")\n            //     }\n            //     return {\n            //         faceUp: state.faceUp,\n            //         faceDown: state.faceDown,\n            //         selected: [],\n            //         numValidSets: state.numValidSets\n            //     }\n            // } else {\n            //     let newSelected = state.selected.concat(action.index)\n            //     return {\n            //         faceUp: state.faceUp,\n            //         faceDown: state.faceDown,\n            //         selected: newSelected,\n            //         numValidSets: state.numValidSets,\n            //     }\n            // }\n        return state;\n    } \n\n    "]},"metadata":{},"sourceType":"module"}