{"ast":null,"code":"import MODES from '../actions/GameModeEnum';\nconst cardColors = [\"#EB96AA\", \"#90CDC3\", \"#7b5c00\"];\nconst cardShapes = [\"flower\", \"heart\", \"star\"];\nconst cardShades = [\"white\", \"solid\", \"black\"];\nconst cardShapeCount = [1, 2, 3]; //Helper function for the isSet function, which checks if 3 attributes are all the same or all different\n//We then do this for all 4 attributes in a medium and hard level, and only 3 out of the 4 attributes in easy\n\nfunction validAttributeCondition(firstAttr, secondAttr, thirdAttr) {\n  return firstAttr === secondAttr && secondAttr === thirdAttr || firstAttr !== secondAttr && firstAttr !== thirdAttr && secondAttr !== thirdAttr;\n} //Function to check if three cards make a set\n\n\nfunction isSet(cardOne, cardTwo, cardThree) {\n  return validAttributeCondition(cardOne.shape, cardTwo.shape, cardThree.shape) && validAttributeCondition(cardOne.color, cardTwo.color, cardThree.color) && validAttributeCondition(cardOne.shade, cardTwo.shade, cardThree.shade) && validAttributeCondition(cardOne.shapeCount, cardTwo.shapeCount, cardThree.shapeCount);\n}\n\nfunction findSet(currentCards) {\n  for (let i = 0; i < currentCards.length; i++) {\n    for (let j = i + 1; j < currentCards.length; j++) {\n      for (let k = j + 1; k < currentCards.length; k++) {\n        if (isSet(currentCards[i], currentCards[j], currentCards[k])) {\n          let first_card = currentCards[i];\n          let second_card = currentCards[j];\n          let third_card = currentCards[k];\n          return true;\n        }\n      }\n    }\n  }\n\n  return false;\n} // This method is from https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array \n//Randomly shuffles an array--we shuffle the arrays that hold cards such that when we flip 3 new cards off the top, they are random\n\n\nfunction shuffleArray(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n}\n\nfunction removeIndices(indices, indexList) {\n  let returnList = [...indexList];\n\n  for (const index in indices) {\n    returnList.splice(index, 1);\n  }\n\n  return returnList;\n}\n\nfunction getNewCards(faceDown, faceUp, numCards) {\n  if (faceDown.length === 0) {\n    return [faceDown, faceUp];\n  }\n\n  let returnFaceDown = [...faceDown];\n  let returnFaceUp = [...faceUp];\n\n  for (let i = 0; i < numCards; i++) {\n    returnFaceUp = returnFaceUp.concat(returnFaceDown[i]);\n  }\n\n  returnFaceDown.splice(0, numCards);\n  return [returnFaceDown, returnFaceUp];\n} //Function that generates an 81 card deck with each of the 4 attributes \n\n\nfunction generateDeck(difficulty) {\n  let deck = [];\n\n  for (let i = 0; i < 3; i++) {\n    for (let j = 0; j < 3; j++) {\n      for (let h = 0; h < 3; h++) {\n        if (difficulty === MODES.EASY) {\n          let card = {\n            color: cardColors[i],\n            shape: cardShapes[j],\n            shade: cardShades[h],\n            shapeCount: 1\n          };\n          deck.push(card);\n        } else {\n          for (let k = 0; k < 3; k++) {\n            let card = {\n              color: cardColors[i],\n              shape: cardShapes[j],\n              shade: cardShades[h],\n              shapeCount: cardShapeCount[k]\n            };\n            deck.push(card);\n          }\n        }\n      }\n    }\n  }\n\n  shuffleArray(deck);\n  return deck;\n}\n\nexport default function DeckReducer(state = {\n  faceUp: [],\n  faceDown: [],\n  selected: [],\n  numValidSets: 0,\n  gameMode: null\n}, action) {\n  // This is the start of the game.\n  if (action.type === \"START GAME\") {\n    let [faceDown, faceUp] = getNewCards(generateDeck(action.difficulty), [], 12);\n\n    if (action.difficulty === MODES.MEDIUM) {\n      while (!findSet(faceUp)) {\n        [faceDown, faceUp] = getNewCards(faceDown, faceUp, 3);\n      }\n    }\n\n    return {\n      faceUp: faceUp,\n      faceDown: faceDown,\n      selected: [],\n      numValidSets: 0,\n      gameMode: action.difficulty\n    };\n  }\n\n  if (action.type === \"DRAW 3 CARDS\") {\n    let [faceDownTemp, faceUpTemp] = getNewCards(state.faceDown, state.faceUp, 3);\n    return {\n      faceUp: faceUpTemp,\n      faceDown: faceDownTemp,\n      selected: state.selected,\n      numValidSets: state.numValidSets,\n      gameMode: state.gameMode\n    };\n  }\n\n  if (action.type === \"SELECT\") {\n    console.log(\"Selecting yo\");\n    console.log(\"action.index \" + action.index);\n    console.log(\"state.selected \" + state.selected);\n    let newSelected = [];\n\n    if (state.selected.includes(action.index)) {\n      newSelected = [...state.selected];\n      let elementIndex = state.selected.indexOf(action.index);\n      newSelected.splice(elementIndex, 1);\n      return {\n        faceUp: state.faceUp,\n        faceDown: state.faceDown,\n        selected: newSelected,\n        numValidSets: state.numValidSets,\n        gameMode: state.gameMode\n      };\n    }\n\n    if (state.selected.length == 2) {\n      state.selected.push(action.index);\n      let validSet = isSet(state.faceUp[action.index], state.faceUp[state.selected[0]], state.faceUp[state.selected[1]]);\n      let faceUp = [...state.faceUp];\n      let faceDown = [...state.faceDown];\n\n      if (validSet) {\n        alert(\"Congrats, you created a valid set.\");\n        faceUp = removeIndices(state.selected, faceUp);\n        let result = getNewCards(faceDown, faceUp, 3);\n        faceDown = result[0];\n        faceUp = result[1];\n\n        if (state.gameMode === MODES.MEDIUM) {\n          while (!findSet(faceUp)) {\n            result = getNewCards(faceDown, faceUp, 3);\n            faceDown = result[0];\n            faceUp = result[1];\n          }\n\n          while (faceUp < 12 && faceDown >= 3) {\n            result = getNewCards(faceDown, faceUp, 3);\n            faceDown = result[0];\n            faceUp = result[1];\n          }\n\n          state.numValidSets++;\n        } else {\n          alert(\"Not a valid set.\");\n        }\n\n        return {\n          faceUp: faceUp,\n          faceDown: faceDown,\n          selected: [],\n          numValidSets: state.numValidSets,\n          gameMode: state.gameMode\n        };\n      } else {\n        console.log(\"This should fire\");\n        return {\n          faceUp: state.faceUp,\n          faceDown: state.faceDown,\n          selected: state.selected.concat(action.index),\n          numValidSets: state.numValidSets,\n          gameMode: state.gameMode\n        };\n      }\n    }\n  }\n\n  return state;\n}\n_c = DeckReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeckReducer\");","map":{"version":3,"sources":["/Users/isidoraconic/Desktop/set-game/src/reducers/DeckReducer.js"],"names":["MODES","cardColors","cardShapes","cardShades","cardShapeCount","validAttributeCondition","firstAttr","secondAttr","thirdAttr","isSet","cardOne","cardTwo","cardThree","shape","color","shade","shapeCount","findSet","currentCards","i","length","j","k","first_card","second_card","third_card","shuffleArray","array","Math","floor","random","removeIndices","indices","indexList","returnList","index","splice","getNewCards","faceDown","faceUp","numCards","returnFaceDown","returnFaceUp","concat","generateDeck","difficulty","deck","h","EASY","card","push","DeckReducer","state","selected","numValidSets","gameMode","action","type","MEDIUM","faceDownTemp","faceUpTemp","console","log","newSelected","includes","elementIndex","indexOf","validSet","alert","result"],"mappings":"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","sourcesContent":["import MODES from '../actions/GameModeEnum';\n\nconst cardColors = [\"#EB96AA\", \"#90CDC3\", \"#7b5c00\"];\nconst cardShapes = [\"flower\", \"heart\", \"star\"];\nconst cardShades = [\"white\", \"solid\", \"black\"];\nconst cardShapeCount = [1, 2, 3];\n\n//Helper function for the isSet function, which checks if 3 attributes are all the same or all different\n//We then do this for all 4 attributes in a medium and hard level, and only 3 out of the 4 attributes in easy\nfunction validAttributeCondition(firstAttr, secondAttr, thirdAttr) {\n    return (firstAttr === secondAttr && secondAttr === thirdAttr) || (firstAttr !== secondAttr && firstAttr !== thirdAttr && secondAttr !== thirdAttr);\n}\n\n//Function to check if three cards make a set\nfunction isSet(cardOne, cardTwo, cardThree) {\n    return validAttributeCondition(cardOne.shape, cardTwo.shape, cardThree.shape) && \n    validAttributeCondition(cardOne.color, cardTwo.color, cardThree.color) &&\n    validAttributeCondition(cardOne.shade, cardTwo.shade, cardThree.shade) && \n    validAttributeCondition(cardOne.shapeCount, cardTwo.shapeCount, cardThree.shapeCount)\n}\n\nfunction findSet(currentCards) {\n    for (let i = 0; i < currentCards.length; i++) {\n        for (let j = i + 1; j < currentCards.length; j++) {\n            for (let k = j + 1; k < currentCards.length; k++) {\n                if (isSet(currentCards[i], currentCards[j], currentCards[k])) {\n                    let first_card = currentCards[i]\n                    let second_card = currentCards[j]\n                    let third_card = currentCards[k]\n                    return true\n                }\n                \n            }\n        }\n    }\n    return false\n}\n\n// This method is from https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array \n//Randomly shuffles an array--we shuffle the arrays that hold cards such that when we flip 3 new cards off the top, they are random\nfunction shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n}\n\nfunction removeIndices(indices, indexList) {\n    let returnList = [...indexList]\n    for (const index in indices) {\n        returnList.splice(index, 1)\n    }\n    return returnList\n}\n\nfunction getNewCards(faceDown, faceUp, numCards) {\n    if (faceDown.length === 0) {\n        return [faceDown, faceUp]\n    }\n    let returnFaceDown = [...faceDown]\n    let returnFaceUp = [...faceUp]\n    for (let i = 0; i < numCards; i++) {\n        returnFaceUp = returnFaceUp.concat(returnFaceDown[i])\n    }\n    returnFaceDown.splice(0, numCards)\n    return [returnFaceDown, returnFaceUp]\n}\n\n//Function that generates an 81 card deck with each of the 4 attributes \nfunction generateDeck(difficulty) {\n    let deck = [];\n\n    for(let i = 0; i < 3; i++) {\n        for(let j = 0; j < 3; j++) {\n            for(let h = 0; h < 3; h++) {\n                if (difficulty === MODES.EASY) {\n                    let card = {\n                        color: cardColors[i],\n                        shape: cardShapes[j],\n                        shade: cardShades[h],\n                        shapeCount: 1,\n                    }\n                    deck.push(card);\n                } else {\n                    for(let k = 0; k < 3; k++) {\n                        let card = {\n                            color: cardColors[i],\n                            shape: cardShapes[j],\n                            shade: cardShades[h],\n                            shapeCount: cardShapeCount[k],\n                        }\n                        deck.push(card);\n                    }\n                }\n            }\n        }\n    }\n    shuffleArray(deck)\n    return deck;\n}\n\nexport default function DeckReducer (\n    state = {\n        faceUp: [],\n        faceDown: [],\n        selected: [],\n        numValidSets: 0,\n        gameMode: null,\n    }, action) {\n        // This is the start of the game.\n        if (action.type === \"START GAME\") {\n            let [faceDown, faceUp]= getNewCards(generateDeck(action.difficulty), [], 12)\n            if (action.difficulty === MODES.MEDIUM) {\n                while(!findSet(faceUp)) {\n                    [faceDown, faceUp] = getNewCards(faceDown, faceUp, 3)\n                }\n            }\n            return {\n                faceUp: faceUp,\n                faceDown: faceDown,\n                selected: [],\n                numValidSets: 0,\n                gameMode: action.difficulty\n            }\n        }\n        if(action.type === \"DRAW 3 CARDS\") {\n            let [faceDownTemp, faceUpTemp] = getNewCards(state.faceDown, state.faceUp, 3)\n            return {\n                faceUp: faceUpTemp,\n                faceDown: faceDownTemp,\n                selected: state.selected,\n                numValidSets: state.numValidSets,\n                gameMode: state.gameMode\n            }\n\n        }\n        if (action.type === \"SELECT\") {\n            console.log(\"Selecting yo\")\n            console.log(\"action.index \" + action.index)\n            console.log(\"state.selected \" + state.selected)\n            let newSelected = []\n            if (state.selected.includes(action.index)) {\n                newSelected = [...state.selected]\n                let elementIndex = state.selected.indexOf(action.index)\n                newSelected.splice(elementIndex, 1)\n                return {\n                    faceUp: state.faceUp,\n                    faceDown: state.faceDown,\n                    selected: newSelected,\n                    numValidSets: state.numValidSets,\n                    gameMode: state.gameMode\n                }\n            }\n            if (state.selected.length == 2) {\n                state.selected.push(action.index);\n                let validSet = isSet(state.faceUp[action.index], state.faceUp[state.selected[0]], state.faceUp[state.selected[1]]);\n                let faceUp = [...state.faceUp]\n                let faceDown = [...state.faceDown]\n                if (validSet) {\n                    alert(\"Congrats, you created a valid set.\")\n                    faceUp = removeIndices(state.selected, faceUp);\n                    let result = getNewCards(faceDown, faceUp, 3);\n                    faceDown = result[0]\n                    faceUp = result[1]\n                    if (state.gameMode === MODES.MEDIUM) {\n                        while(!findSet(faceUp)) {\n                            result = getNewCards(faceDown, faceUp, 3)\n                            faceDown = result[0]\n                            faceUp = result[1]\n                        }\n                    while(faceUp < 12 && faceDown >= 3) {\n                        result = getNewCards(faceDown, faceUp, 3)\n                        faceDown = result[0]\n                        faceUp = result[1]\n                    }\n                    state.numValidSets++;\n                } else {\n                    alert(\"Not a valid set.\")\n                }\n                return {\n                    faceUp: faceUp,\n                    faceDown: faceDown,\n                    selected: [],\n                    numValidSets: state.numValidSets,\n                    gameMode: state.gameMode\n                }\n            } else {\n                console.log(\"This should fire\")\n                return {\n                    faceUp: state.faceUp,\n                    faceDown: state.faceDown,\n                    selected: state.selected.concat(action.index),\n                    numValidSets: state.numValidSets,\n                    gameMode: state.gameMode\n                }\n            }\n        } \n    }\n    return state;\n}\n"]},"metadata":{},"sourceType":"module"}