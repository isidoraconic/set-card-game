{"ast":null,"code":"const cardColors = [\"yellow\", \"blue\", \"red\"];\nconst cardShapes = [\"triangle\", \"circle\", \"square\"]; //const cardIcons = [<Icon name=\"flower\" />, <Icon name=\"heart\" />, <Icon name=\"star\" />]\n\nconst cardShades = [\"empty\", \"lines\", \"fill\"];\nconst cardShapeCount = [1, 2, 3];\nconst defaultDeck = generateDeck();\nexport default function DeckReducer(state = {\n  faceUp: [],\n  faceDown: defaultDeck,\n  selected: []\n}, action) {\n  if (action.type === \"NEW CARD\") {\n    let flipIndex = randomNum(0, state.faceDown.length - 1);\n    let flippedCard = this.state.faceDown[flipIndex];\n    return {\n      faceUp: this.state.faceUp.push(flippedCard),\n      faceDown: this.state.faceDown.splice(flipIndex, 1),\n      selected: this.state.selected\n    };\n  } else if (action.type === \"CLEAR\") {\n    return {\n      faceUp: [],\n      faceDown: defaultDeck,\n      selected: []\n    };\n  } else {\n    return state;\n  }\n} //this function is from: https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript \n\n_c = DeckReducer;\n\nfunction randomNum(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction generateDeck() {\n  let deck = [];\n\n  for (let i = 0; i < 3; i++) {\n    for (let j = 0; j < 3; j++) {\n      for (let h = 0; h < 3; h++) {\n        for (let k = 0; k < 3; k++) {\n          let card = {\n            color: cardColors[i],\n            shape: cardShapes[j],\n            shade: cardShades[h],\n            shapeCount: cardShapeCount[k]\n          };\n          deck.push(card);\n        }\n      }\n    }\n  }\n\n  return deck;\n}\n\nfunction findIndexOf(arr, target) {\n  for (var i = 0, len = arr.length; i < len; i++) {\n    if (arr[i] === target) return i;\n  }\n\n  return -1;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"DeckReducer\");","map":{"version":3,"sources":["/Users/isidoraconic/Desktop/web-projects/set-game/src/reducers/DeckReducer.js"],"names":["cardColors","cardShapes","cardShades","cardShapeCount","defaultDeck","generateDeck","DeckReducer","state","faceUp","faceDown","selected","action","type","flipIndex","randomNum","length","flippedCard","push","splice","min","max","Math","floor","random","deck","i","j","h","k","card","color","shape","shade","shapeCount","findIndexOf","arr","target","len"],"mappings":"AAAA,MAAMA,UAAU,GAAG,CAAC,QAAD,EAAW,MAAX,EAAmB,KAAnB,CAAnB;AACA,MAAMC,UAAU,GAAG,CAAC,UAAD,EAAa,QAAb,EAAuB,QAAvB,CAAnB,C,CACA;;AACA,MAAMC,UAAU,GAAG,CAAC,OAAD,EAAU,OAAV,EAAmB,MAAnB,CAAnB;AACA,MAAMC,cAAc,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAvB;AACA,MAAMC,WAAW,GAAGC,YAAY,EAAhC;AAEA,eAAe,SAASC,WAAT,CACXC,KAAK,GAAG;AACJC,EAAAA,MAAM,EAAE,EADJ;AAEJC,EAAAA,QAAQ,EAAEL,WAFN;AAGJM,EAAAA,QAAQ,EAAE;AAHN,CADG,EAKRC,MALQ,EAKA;AACP,MAAGA,MAAM,CAACC,IAAP,KAAgB,UAAnB,EAA+B;AAC3B,QAAIC,SAAS,GAAGC,SAAS,CAAC,CAAD,EAAKP,KAAK,CAACE,QAAN,CAAeM,MAAf,GAAsB,CAA3B,CAAzB;AACA,QAAIC,WAAW,GAAG,KAAKT,KAAL,CAAWE,QAAX,CAAoBI,SAApB,CAAlB;AACA,WAAO;AACHL,MAAAA,MAAM,EAAE,KAAKD,KAAL,CAAWC,MAAX,CAAkBS,IAAlB,CAAuBD,WAAvB,CADL;AAEHP,MAAAA,QAAQ,EAAE,KAAKF,KAAL,CAAWE,QAAX,CAAoBS,MAApB,CAA2BL,SAA3B,EAAsC,CAAtC,CAFP;AAGHH,MAAAA,QAAQ,EAAE,KAAKH,KAAL,CAAWG;AAHlB,KAAP;AAMH,GATD,MASO,IAAIC,MAAM,CAACC,IAAP,KAAgB,OAApB,EAA6B;AAChC,WAAO;AACHJ,MAAAA,MAAM,EAAE,EADL;AAEHC,MAAAA,QAAQ,EAAEL,WAFP;AAGHM,MAAAA,QAAQ,EAAE;AAHP,KAAP;AAKH,GANM,MAMA;AACH,WAAOH,KAAP;AACH;AAEJ,C,CAED;;KA3BoBD,W;;AA4BpB,SAASQ,SAAT,CAAmBK,GAAnB,EAAwBC,GAAxB,EAA6B;AACzB,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAN,GAAY,CAA7B,IAAkCA,GAA7C,CAAP;AACD;;AAEH,SAASd,YAAT,GAAwB;AACpB,MAAImB,IAAI,GAAG,EAAX;;AACA,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,CAAnB,EAAsBA,CAAC,EAAvB,EAA2B;AACvB,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,CAAnB,EAAsBA,CAAC,EAAvB,EAA2B;AACvB,WAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,CAAnB,EAAsBA,CAAC,EAAvB,EAA2B;AACvB,aAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,CAAnB,EAAsBA,CAAC,EAAvB,EAA2B;AAEvB,cAAIC,IAAI,GAAG;AACPC,YAAAA,KAAK,EAAE9B,UAAU,CAACyB,CAAD,CADV;AAEPM,YAAAA,KAAK,EAAE9B,UAAU,CAACyB,CAAD,CAFV;AAGPM,YAAAA,KAAK,EAAE9B,UAAU,CAACyB,CAAD,CAHV;AAIPM,YAAAA,UAAU,EAAE9B,cAAc,CAACyB,CAAD;AAJnB,WAAX;AAMAJ,UAAAA,IAAI,CAACP,IAAL,CAAUY,IAAV;AACH;AACJ;AACJ;AACJ;;AACD,SAAOL,IAAP;AACH;;AAED,SAASU,WAAT,CAAqBC,GAArB,EAA0BC,MAA1B,EAAkC;AAC9B,OAAI,IAAIX,CAAC,GAAG,CAAR,EAAWY,GAAG,GAAGF,GAAG,CAACpB,MAAzB,EAAiCU,CAAC,GAAGY,GAArC,EAA0CZ,CAAC,EAA3C,EAA+C;AAC3C,QAAIU,GAAG,CAACV,CAAD,CAAH,KAAWW,MAAf,EAAuB,OAAOX,CAAP;AAC1B;;AACD,SAAO,CAAC,CAAR;AACH","sourcesContent":["const cardColors = [\"yellow\", \"blue\", \"red\"];\nconst cardShapes = [\"triangle\", \"circle\", \"square\"];\n//const cardIcons = [<Icon name=\"flower\" />, <Icon name=\"heart\" />, <Icon name=\"star\" />]\nconst cardShades = [\"empty\", \"lines\", \"fill\"];\nconst cardShapeCount = [1, 2, 3];\nconst defaultDeck = generateDeck();\n\nexport default function DeckReducer (\n    state = {\n        faceUp: [],\n        faceDown: defaultDeck,\n        selected: [],\n    }, action) {\n        if(action.type === \"NEW CARD\") {\n            let flipIndex = randomNum(0, (state.faceDown.length-1));\n            let flippedCard = this.state.faceDown[flipIndex];\n            return {\n                faceUp: this.state.faceUp.push(flippedCard),\n                faceDown: this.state.faceDown.splice(flipIndex, 1),\n                selected: this.state.selected,\n            } \n\n        } else if (action.type === \"CLEAR\") {\n            return {\n                faceUp: [],\n                faceDown: defaultDeck,\n                selected: [],\n            }\n        } else {\n            return state;\n        }\n\n    }\n\n    //this function is from: https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript \n    function randomNum(min, max) {\n        return Math.floor(Math.random() * (max - min + 1) + min);\n      }\n\n    function generateDeck() {\n        let deck = [];\n        for(let i = 0; i < 3; i++) {\n            for(let j = 0; j < 3; j++) {\n                for(let h = 0; h < 3; h++) {\n                    for(let k = 0; k < 3; k++) {\n                        \n                        let card = {\n                            color: cardColors[i],\n                            shape: cardShapes[j],\n                            shade: cardShades[h],\n                            shapeCount: cardShapeCount[k],\n                        }\n                        deck.push(card);\n                    }\n                }\n            }\n        }\n        return deck;\n    }\n\n    function findIndexOf(arr, target) {\n        for(var i = 0, len = arr.length; i < len; i++) {\n            if (arr[i] === target) return i;\n        }\n        return -1;\n    }\n"]},"metadata":{},"sourceType":"module"}